#!/bin/csh

set Patient = `basename $cwd`

if( ! -e Logs) mkdir Logs

set DEBUG_FILE = ${cwd}/Logs/GenerateParams.log
rm -f ${DEBUG_FILE}
touch ${DEBUG_FILE}


#load the configuration file
if(-e ${PP_SCRIPTS}/Config/P1.cfg) then
	source ${PP_SCRIPTS}/Config/P1.cfg
	echo "Loaded P1 configuration."
else
	echo "Cannot open P1 configuration. Ensure your login files are setup correctly."
	exit 1
endif

if(! -e ../../Study.cfg) then
	echo "Could not find a Study.cfg for the current study."
	exit 1
endif

source ../../Study.cfg

if($#argv < 1) then
	set DICOM_Dir = dicom
else
	set DICOM_Dir = $1
endif

if(-e ${Patient}.params) then
	mv ${Patient}.params ${Patient}.params.bak
endif

touch ${Patient}.params


##############################################
## FILL OUT KNOWN VARIABLES IN THE PARAMS FILE
##############################################

echo "Filling out known parameters for "${Patient}

echo " " >> ${Patient}.params
echo "##############" >> ${Patient}.params
echo "# Automatically inserted variables from P1" >> ${Patient}.params
echo "##############" >> ${Patient}.params
echo " " >> ${Patient}.params
echo "#####################" >> ${Patient}.params
echo "## " >> ${Patient}.params
echo "## Scan information. Be sure to double check" >> ${Patient}.params
echo "## as the script may have missed them" >>${Patient}.params
echo "##" >> ${Patient}.params
echo "#####################" >> ${Patient}.params

####################
##
## Figure out what scans do what
##
####################

#need to figure out the dcm root now though and save it for later

set dcmroot = $Patient
echo "dcmroot is ${dcmroot}"


echo "" >> ${Patient}.params
echo "############################" >> ${Patient}.params
echo "#		Anatomical" >> ${Patient}.params
echo "############################" >> ${Patient}.params

##################################
## Find the MPRAGE
##################################
set Scan = (`$PP_SCRIPTS/Utilities/detect_scan.csh "$MPRAGE_List" ${DICOM_Dir}`)


if($#Scan > 0) then
	set image_set = ()
	foreach Image($Scan)
		set image_set = ($image_set \"$Image\")
	end
	echo "set mprs = ($image_set)		# hi-res MPRAGE/T1. Multiple are registered and averaged to the first entry." >> ${Patient}.params
	echo "MPRAGE: "${Scan} >> ${DEBUG_FILE}
	echo "Set MPRAGE..."
else
	echo "Could not find a MPRAGE..."
	echo ${Patient} - Could not find a MPRAGE! >> ${DEBUG_FILE}
	echo "#set mprs = ()		# hi-res MPRAGE/T1. Multiple are registered and averaged to the first entry" >> ${Patient}.params
endif

##################################
## Find the T2
##################################
set Scan = (`$PP_SCRIPTS/Utilities/detect_scan.csh "$T2w_List" ${DICOM_Dir}`)

if($#Scan > 0) then
	set image_set = ()
	foreach Image($Scan)
		set image_set = ($image_set \"$Image\")
	end
	echo "set tse = ($image_set)		# T2W scan(s). Multiple are registered and averaged to the first entry" >> ${Patient}.params
	echo "T2w: "${Scan} >> ${DEBUG_FILE}
	echo "Set T2w..."
else
	echo "Could not find a T2w..."
	echo "${Patient} - Could not find a T2w" >> ${DEBUG_FILE}
	echo "#set tse = ()		# tse T2W scan(s). Multiple are registered and averaged to the first entry." >> ${Patient}.params
endif

##################################
## Find the FLAIR
##################################
set Scan = (`$PP_SCRIPTS/Utilities/detect_scan.csh "$FLAIR_List" ${DICOM_Dir}`)

if($#Scan > 0) then
	set image_set = ()
	foreach Image($Scan)
		set image_set = ($image_set \"$Image\")
	end
	echo "set flair = ($image_set)		# FLAIR T2. Multiple are registered and averaged to the first entry" >> ${Patient}.params
	echo "FLAIR: "${Scan} >> ${DEBUG_FILE}
	echo "Set FLAIR..."
else
	echo "Could not find FLAIR..."
	echo "${Patient} - Could not find FLAIR." >> ${DEBUG_FILE}
	echo "#set flair = ()		# FLAIR T2. Multiple are registered and averaged to the first entry" >> ${Patient}.params
endif

##################################
## Find the SWI
##################################
set Scan = (`$PP_SCRIPTS/Utilities/detect_scan.csh "$SWI_List" ${DICOM_Dir}`)

if($#Scan > 0) then
	set image_set = ()
	foreach Image($Scan)
		set image_set = ($image_set \"$Image\")
	end
	echo "set SWI = ($image_set)		# SWI. Multiple are registered and averaged to the first entry" >> ${Patient}.params
	echo "SWI: "${Scan} >> ${DEBUG_FILE}
	echo "Set SWI..."
else
	echo "Could not find SWI..."
	echo "${Patient} - Could not find SWI." >> ${DEBUG_FILE}
	echo "#set SWI = ()		# SWI. Multiple are registered and averaged to the first entry" >> ${Patient}.params
endif

##################################
## Find the DTI
##################################
echo "" >> ${Patient}.params
echo "############################" >> ${Patient}.params
echo "#		    DTI" >> ${Patient}.params
echo "############################" >> ${Patient}.params
set Scan = (`$PP_SCRIPTS/Utilities/detect_scan.csh "$DTI_List" ${DICOM_Dir}`)

if($#Scan > 0) then
	echo "Set DTI..."
	set GoodScans = ()

	set DTI_dwell = ()
	set DTI_ped = ()
	set DTI_TE = ()
	
	foreach Image($Scan)
		
		set DTI_json = ${DICOM_Dir}/$Image:r:r".json"

		if(! -e $DTI_json) then
			decho "Could not find a json to go with $Image. BIDS conversion must have failed or been done improperly." $DEBUG_FILE
			exit 1
		endif

		if(`grep ORIGINAL $DTI_json` == "") then
			decho "${Image} is not an original series. Skipping..." $DEBUG_FILE
			continue
		endif
		
		if(! -e $DTI_json:r".bval") then
			decho "${Image} does not have a bval file. Skipping..." $DEBUG_FILE
			continue
		endif
		
		if(! -e $DTI_json:r".bvec") then
			decho "${Image} does not have a bvec file. Skipping..." $DEBUG_FILE
			continue
		endif
		
# 		if(`fslinfo ${DICOM_Dir}/$Image | grep -w dim4 | head -1 | awk '{print $2}'` <= 4) then
# 			decho "${Image} does not have enough directions Ignoring." $DEBUG_FILE
# 			continue
# 		endif
		
		set GoodScans = ($GoodScans \"$Image\")
		
		set dwell = `grep \"EffectiveEchoSpacing\" ${DTI_json} | cut -d: -f2 | cut -d, -f1`
			
		set DTI_dwell = ($DTI_dwell `printf "%.8f" $dwell`)
		set DTI_TE = ($DTI_TE `grep \"EchoTime\" $DTI_json | head -1 |  cut -d: -f2 | cut -d, -f1 | head -1 | awk '{if($1 < 1) print($1*1000); else print($1);}'`)
		set ped = `grep \"PhaseEncodingDirection\" ${DTI_json} | cut -d: -f2 | cut -d, -f1 | cut -d\" -f2`
		
		if($ped == "j-" || $ped == "y-" || $ped == "-y") then
			set DTI_ped = ($DTI_ped "-y")
		else if($ped == "j" || $ped == "y") then
			set DTI_ped = ($DTI_ped "y")
		else if($ped == "i" || $ped == "x") then
			set DTI_ped = ($DTI_ped "y")
		else if($ped == "-i" || $ped == "-x" || $ped == "x-") then
			set DTI_ped = ($DTI_ped "-x")
		endif
		
	end

	#DTI stuff

	echo "set DTI = ("${GoodScans}")		# DTI Images" >> ${Patient}.params
	echo "set DTI_TE = ("$DTI_TE")	#TE of DTI images " >> ${Patient}.params
	
	echo "DTI: "${GoodScans} >> ${DEBUG_FILE}
else
	echo "Could not find DTI..."
	echo "${Patient} - Could not find DTI." >> ${DEBUG_FILE}
	echo "#set DTI = ()		# DTI Images" >> ${Patient}.params
	echo "#set DTI_TE = ()	#TE of DTI images" >> ${Patient}.params
endif

##################################
## Find the ASL
##################################
echo "" >> ${Patient}.params
echo "############################" >> ${Patient}.params
echo "#		    ASL" >> ${Patient}.params
echo "############################" >> ${Patient}.params

set Scan = (`$PP_SCRIPTS/Utilities/detect_scan.csh "$ASL_List" ${DICOM_Dir}`)

if($#Scan > 0) then
	echo "Set ASL..."
	set GoodScans = ()

	foreach Image($Scan)
		#have to pull off the first file found in two steps... cause ls is dumb sometimes
		if($Image:e == "gz") set ASL_json = ${DICOM_Dir}/$Image:r:r".json"
		if($Image:e == "nii") set ASL_json = ${DICOM_Dir}/$Image:r".json"

		if(! -e $ASL_json) then
			decho "Could not find a json to go with $Image. BIDS conversion must have failed or been done improperly." $DEBUG_FILE
			exit 1
		endif

		if(`grep ORIGINAL $ASL_json` == "") then
			decho "${Image} is not an original series. Skipping..." $DEBUG_FILE
			continue
		endif

		if(`fslinfo ${DICOM_Dir}/$Image | grep dim4 | head -1 | awk '{print $2}'` <= 4) then
			decho "${Image} does not have enough frames. Ignoring." $DEBUG_FILE
			continue
		endif
		
		#ASL stuff
		set GoodScans = ($GoodScans \"$Image\")
	end
	
	set ASL_dwell = ()
	set ASL_TE = ()
	set ASL_PLD = ()
	set ASL_TI1 = ()
	set ASL_TR = ()
	set ASL_PED = ()
	
	#detect parameters for each scan
	foreach Image($GoodScans)
		
		set Image = `echo $Image | sed 's/\"//g'`
		
		if($Image:e == "gz") set ASL_json = ${DICOM_Dir}/$Image:r:r".json"
		if($Image:e == "nii") set ASL_json = ${DICOM_Dir}/$Image:r".json"
		
		set ASL_TE = ($ASL_TE `grep \"EchoTime\" $ASL_json | head -1 |  cut -d: -f2 | cut -d, -f1 | head -1 | awk '{if($1 < 1) print($1*1000); else print($1);}'`)

		set ASL_dwell_time = `grep \"EffectiveEchoSpacing\" ${ASL_json} | cut -d: -f2 | cut -d, -f1`
		
		#check for DwellTime
		if($#ASL_dwell_time == 0) then
			set ASL_dwell_time = `grep \"DwellTime\" ${ASL_json} | cut -d: -f2 | cut -d, -f1 | awk '{printf("%.14f",$1)}'`
		endif
		
		if($#ASL_dwell_time == 0) then

			#try to compute it
			set bandwidth = `grep \"PixelBandwidth\" ${DICOM_Dir}/$Image:r:r".json" | head -1 | cut -d: -f2 | cut -d, -f1`
			set matrix = `grep \"ReconMatrixPE\" ${DICOM_Dir}/$Image:r:r".json" | head -1 | cut -d: -f2 | cut -d, -f1`
			set factor = 1
			set num = `echo $bandwidth $matrix $factor | awk '{printf("%s",((1/($1 * $2))/$3) * 1000)}'`
			
			if($#num > 0) then
				set ASL_dwell_time = (`printf "%.14f" $num`)
			endif
		endif
		
		if($#ASL_dwell_time == 0) then
			set ASL_dwell_time = "-"
		endif
		
		set ASL_dwell = ($ASL_dwell `printf "%.8f" $ASL_dwell_time`)

		set temp = (`grep PostLabelDelay ${ASL_json} | head -1 |  cut -d":" -f2` | cut -d, -f1)
		if( $#temp > 0) then
			set temp =  (`grep \"PostLabelDelay\" ${ASL_json} | head -1 |cut -d: -f2 | cut -d, -f1 | awk '{if($1 > 10) print($1*0.001); else print($1);}'`)
			goto HAS_PLD
		endif
		
		set temp =  (`grep \"T1\" ${ASL_json} | head -1 |cut -d: -f2 | cut -d, -f1`)
		if( $#temp > 0) then
			set temp =  (`grep \"T1\" ${ASL_json} | head -1 |cut -d: -f2 | cut -d, -f1`)
			goto HAS_PLD
		endif

		set temp = (`grep \"InversionTime2\" ${ASL_json} | head -1 |  cut -d":" -f1`)
		if( $#temp > 0) then
			set temp = `grep \"InversionTime2\" ${ASL_json} | head -1 | cut -d: -f2 | cut -d, -f1 | awk '{if($1 > 10) print($1*0.001); else print($1);}'`
			goto HAS_PLD
		endif
		
		if($#temp == 0) then
			decho "WARNING: Unable to determine PLD of ASL Sequence $Image ..." $DEBUG_FILE
			set temp = "-"
		endif
		
		HAS_PLD:
		
		set ASL_PLD = ($ASL_PLD $temp)
		
		set temp = (`grep \"InversionTime1\" ${ASL_json} | head -1 |  cut -d":" -f1`)
		if( $#temp > 0) then
			set ASL_TI1 = ($ASL_TI1  `grep \"InversionTime1\" ${ASL_json} | head -1 | cut -d: -f2 | cut -d, -f1 | awk '{if($1 > 10) print($1*0.001); else print($1);}'`)
		else
			set ASL_TI1 = ($ASL_TI1 0)
		endif

		set temp =( `grep RepetitionTime ${ASL_json} | head -1 | cut -d":" -f1`)
		if( $#temp > 0) then
			set ASL_TR = ($ASL_TR  `grep \"RepetitionTime\" ${ASL_json} | head -1 | cut -d: -f2 | cut -d, -f1 | awk '{if($1 > 10) print($1*0.001); else print($1);}'`)
		else
			set ASL_TR = ($ASL_TR  0)
		endif
		
		
		set curr_scan = `echo $Scan | sed 's/\"//g'`
		
		set PED = `grep \"PhaseEncodingDirection\" ${ASL_json}| head -1 | cut -d: -f2 | cut -d, -f1`

		if($#PED == 0) then
			set PED = `grep \"PhaseEncodingAxis\" ${ASL_json} | head -1 | cut -d: -f2 | cut -d, -f1`
		endif
		
		if($#PED == 0) then
			set PED = "-"
		else if($PED == \"j-\") then
			set PED = "-y"
		else if($PED == \"j\") then
			set PED = "y"
		else if($PED == \"i-\") then
			set PED = "-x"
		else if($PED == \"i\") then
			set PED = "x"
		endif
		
		set ASL_PED = ($ASL_PED $PED)

	end

	echo "set ASL = ("${GoodScans}")		# ASL Images" >> ${Patient}.params
	echo "ASL: "${GoodScans} >> ${DEBUG_FILE}
	echo "set ASL_TE = ($ASL_TE)	#TE of the ASL sequence in milliseconds." >> ${Patient}.params

	echo "set ASL_PLD = ($ASL_PLD)	#PostLabelingDelay (pcASL) or TI2 (pASL)" >> ${Patient}.params
	echo "set ASL_TI1 = ($ASL_TI1)	#TI1 (pASL). 0 if the sequence is pcASL" >> ${Patient}.params
	echo "set ASL_TR = ($ASL_TR)	#TR of the sequence." >> ${Patient}.params

else
	echo "Could not find ASL..."
	echo "${Patient} - Could not find ASL." >> ${DEBUG_FILE}
	echo "#set ASL = ()		# ASL Images" >> ${Patient}.params
	echo "#set ASL_PLD = ()	#PostLabelingDelay (pcASL) or TI2 (pASL)" >> ${Patient}.params
	echo "#set ASL_TI1 = ()	#TI1 (pASL). 0 if the sequence is pcASL" >> ${Patient}.params
	echo "#set ASL_TR = ()	#TR of the sequence." >> ${Patient}.params
endif
 
##################################
## Find the BOLD scan numbers
##################################
echo "" >> ${Patient}.params
echo "############################" >> ${Patient}.params
echo "#	  	   BOLD" >> ${Patient}.params
echo "############################" >> ${Patient}.params

set Scan = (`$PP_SCRIPTS/Utilities/detect_scan.csh "$BOLD_List" ${DICOM_Dir}`)

##################################
	## Index the BOLD's
	##################################
echo "Set BOLD..."

set GoodScans = ()
foreach Image($Scan)
	if($Image:e == "gz") set BOLD_json = ${DICOM_Dir}/$Image:r:r".json"
	if($Image:e == "nii") set BOLD_json = ${DICOM_Dir}/$Image:r".json"
		
	if(! -e $BOLD_json) then
		decho "Could not find a json to go with $Image. BIDS conversion must have failed or been done improperly." $DEBUG_FILE
		continue
	endif

	if(`grep ORIGINAL $BOLD_json` == "") then
		decho "${Image} is not an original series. Skipping..." $DEBUG_FILE
		continue
	endif

	if(`fslinfo ${DICOM_Dir}/$Image | grep dim4 | head -1 | awk '{print $2}'` <= 10) then
		decho "${Image} does not have enough frames. Ignoring." $DEBUG_FILE
		continue
	endif
	
	#check if the scan is a nordic component
	
	set IsNordic = 0
	@ i = 1
	while($i <= $#NORDIC_BOLD_List)
		echo $Image >! temp
		
		if(`echo $Image | grep "$NORDIC_BOLD_List[$i]"` != "") then
			decho "${Image} is probably a NORDIC phase image." $DEBUG_FILE
			set IsNordic = 1
			break
		endif
		
		@ i++
	end
	
	if($IsNordic) then
		continue
	endif
	
	set GoodScans = ($GoodScans \"$Image\")
end

if($#GoodScans > 0) then

	set IsMultiecho = 0
	
	set BOLD_dwell = ()
	set BoldIndices = ()
	unset BOLD_json
	@ i = 1
	while($i <= $#GoodScans)
		set BoldIndices = ($BoldIndices $i)
		set json = `echo ${DICOM_Dir}/$GoodScans[$i]:r:r".json" | sed 's/\"//g'`
		
		if(`grep \"EchoNumber\" $json` != "") then
			echo "data is multiecho"
			set IsMultiecho = 1
			set BOLD_json = $json
		endif
		
		@ i++
	end

	if(! $?BOLD_json) then
		set BOLD_json = `echo ${DICOM_Dir}/$GoodScans[1]:r:r".json" | sed 's/\"//g'`
	endif
	
	echo "Using $BOLD_json for BOLD timings."

	#check the BOLD to see if it is MultiEcho
	if($IsMultiecho) then
	
		set ME_ScanSets = ()
		set BOLD_TE = ()
		set BOLD_ORDER = ()
		@ i = 1
		set ScanOrder = ($GoodScans)
		
		#go through each bold run and put the TE  and run in order from lowest echo to highest
		
		while($i <= $#ScanOrder)
			@ lowest_te = 10000
			@ lowest_te_index = 1
			@ j = 1
			while($j <= $#ScanOrder)
			
				if($ScanOrder[$j] != "") then
					set BOLD_Scan = `echo ${DICOM_Dir}/$ScanOrder[$j] | sed -r 's/"//g'`
					set BOLD_Scan = $BOLD_Scan:r:r".json"
					
					set curr_te = `grep \"EchoTime\" $BOLD_Scan | cut -d":" -f2 | cut -d"," -f1 | awk '{print $1 * 1000}'`
					
					if(`echo $curr_te $lowest_te | awk '{if($1 < $2) print 1}'`) then
						set lowest_te = $curr_te
						@ lowest_te_index = $j
					endif
				endif
				@ j++
			end
			
			set BOLD_ORDER =($BOLD_ORDER $ScanOrder[$lowest_te_index])
			set BOLD_TE = ($BOLD_TE $lowest_te)
			set ScanOrder[$lowest_te_index] = ""
			
			@ i++
		end
		
		#trim off duplicate echos
		set BOLD_TE = (`echo $BOLD_TE | sed 's/ /\n/g' | uniq`)
		
		echo $BOLD_TE
		
		set ME_ScanIndices = (`echo $BOLD_ORDER | sed -r 's/ /\n/g' | grep _e | grep .nii.gz | sed -r 's/_/\t/g' | awk '{print $(NF-1)}'`)
		
		rm -f temp
		touch temp
		foreach Run($ME_ScanIndices)
			echo $Run >> temp
		end
		
		sort temp | uniq
	
		set ME_ScanIndices = (`sort temp | uniq | awk '{printf $1" "}'`)
		rm temp
		
		@ i = 1
		@ Assignment = 1
		while($i <= $#ME_ScanIndices)
			set ME_SetLength = ""
			@ j = 1
			while($j <= $#BOLD_TE)
				set ME_SetLength = `echo $ME_SetLength$Assignment`
				
				if($j < $#BOLD_TE) then
					set ME_SetLength = `echo $ME_SetLength","`
				endif
				@ j++
				@ Assignment++
			end
			set ME_ScanSets = ($ME_ScanSets $ME_SetLength)
			@ i++
		end
		echo $ME_ScanSets
		
		set ME_ScanSets_Reordered = ()
		#now reorder the ME_ScanSets by TE
		foreach ME($ME_ScanSets)
			
			set curr_me_indices = (`echo $ME | sed -r 's/,/ /g'`)
			
			#read each json and do like before where we found all the TE's
			set ScanOrder = ()
			echo $#GoodScans
			
			foreach SetScan($curr_me_indices)
				set ScanOrder = ($ScanOrder $GoodScans[$SetScan])
			end
			
			@ i = 1
			set SET_ORDER = ()
			while($i <= $#ScanOrder)
				
				@ lowest_te = 1000
				@ lowest_te_index = 1
				@ j = 1
				while($j <= $#ScanOrder)
			
					if($ScanOrder[$j] != "") then
						set BOLD_Scan = `echo ${DICOM_Dir}/$ScanOrder[$j] | sed -r 's/"//g'`
						set BOLD_Scan = $BOLD_Scan:r:r".json"
						
						set curr_te = `grep \"EchoTime\" $BOLD_Scan | cut -d":" -f2 | cut -d"," -f1 | awk '{print $1 * 1000}'`
						
						if(`echo $curr_te $lowest_te | awk '{if($1 < $2) print 1}'`) then
							set lowest_te = $curr_te
							@ lowest_te_index = $j
						endif
					endif
					@ j++
				end
				
				set SET_ORDER = ($SET_ORDER$curr_me_indices[$lowest_te_index]",")
				set ScanOrder[$lowest_te_index] = ""
				
				@ i++
			end
			
			set ME_ScanSets_Reordered = ($ME_ScanSets_Reordered $SET_ORDER)
		end
		
		set RegisterEcho = `echo $#SET_ORDER | awk '{printf("%3.0f",$1/2)}'`
		
		echo $ME_ScanSets_Reordered
		set ME_ScanSets = ($ME_ScanSets_Reordered)
		echo $ME_ScanSets
		
		set ME_SetIndices = ()
		@ i = 1
		while($i <= $#ME_ScanSets)
			set ME_SetIndices = ($ME_SetIndices $i)
			@ i++
		end
		
	else
		set BOLD_TE = `grep \"EchoTime\" $BOLD_json | head -1 | cut -d: -f2 | cut -d, -f1 | awk '{print $1*1000}'`
	endif
	
	echo "set BOLD = ($GoodScans)		# filenames of the bold runs" >> ${Patient}.params
	echo "set RunIndex = ("$BoldIndices")		# BOLD RunID" >> ${Patient}.params
	
	if($?ME_ScanSets) then
		echo "set FCProcIndex = ("$ME_SetIndices")		# Multiecho Set ID's to functionally preprocess" >> ${Patient}.params
	else
		echo "set FCProcIndex = ("$BoldIndices")		# BOLD RunID's to functionally preprocess" >> ${Patient}.params
	endif
	
	echo "BOLD Scans: "$GoodScans >> ${DEBUG_FILE}

	##################
	# fcMRI parameters
	##################

	#Parameters from the JSON
	#SliceTiming = order and time of a slice
	#EchoTime = TE
	#RepetitionTime = TR
	#EffectiveEchoSpacing = dwell we will use
	#PhaseEncodingDirection = direction of encoding (j- = -y)
	#ParallelReductionFactorInPlane = GRAPPA/SENSE accelleration factor
	
	set BOLD_dwell = ()

	foreach Scan($GoodScans)
	
		set curr_scan = `echo $Scan | sed 's/\"//g'`
		
		set DWELL = `grep \"EffectiveEchoSpacing\" ${DICOM_Dir}/$curr_scan:r:r".json" | head -1 | cut -d: -f2 | cut -d, -f1`
		
		if($#DWELL == 0) then
			set DWELL = `grep \"DwellTime\" ${DICOM_Dir}/$curr_scan:r:r".json" | head -1 | cut -d: -f2 | cut -d, -f1 | awk '{printf("%.14f",$1)}'`
		endif
		
		if($#DWELL == 0) then
			#try to compute it
			set bandwidth = `grep \"PixelBandwidth\" ${DICOM_Dir}/$curr_scan:r:r".json" | head -1 | cut -d: -f2 | cut -d, -f1`
			set matrix = `grep \"ReconMatrixPE\" ${DICOM_Dir}/$curr_scan:r:r".json" | head -1 | cut -d: -f2 | cut -d, -f1`
			set factor = 1
			set DWELL = `echo $bandwidth $matrix $factor | awk '{printf("%s",((1/($1 * $2))/$3) * 1000)}'`
			
			if($DWELL == "") then
				set DWELL = "-"
			endif
		endif
		
		set BOLD_dwell = ($BOLD_dwell $DWELL)
	end
	
	echo $BOLD_dwell
	
	if($#BOLD_dwell == 0) then
		set BOLD_dwell = `printf "%.8f" $BOLD_dwell`
	endif

	set BOLD_TR = `grep \"RepetitionTime\" $BOLD_json | head -1 | cut -d: -f2 | cut -d, -f1`
	
	set BOLD_PED = ()
	foreach Scan($GoodScans)
	
		set curr_scan = `echo $Scan | sed 's/\"//g'`
		
		set PED = `grep \"PhaseEncodingDirection\" ${DICOM_Dir}/$curr_scan:r:r".json" | head -1 | cut -d: -f2 | cut -d, -f1`

		if($#PED == 0) then
			set PED = `grep \"PhaseEncodingAxis\" ${DICOM_Dir}/$curr_scan:r:r".json" | head -1 | cut -d: -f2 | cut -d, -f1`
		endif
		
		if($PED[1] == \"j-\") then
			set PED = "-y"
		else if($PED[1] == \"j\") then
			set PED = "y"
		else if($PED[1] == \"i\") then
			set PED = "x"
		else if($PED[1] == \"-i\") then
			set PED = "-x"
		endif
		
		set BOLD_PED = ($BOLD_PED $PED)
	end
	
	set BOLD_MB_Factor = `grep \"MultibandAccelerationFactor\" $BOLD_json | head -1 | cut -d: -f2 | cut -d, -f1`

	if($#BOLD_MB_Factor == 0) then
		set BOLD_MB_Factor = 1
	endif

	#extracts the interleave timings
	echo "set BOLD_SIO = `$PP_SCRIPTS/Utilities/slice_interleave_order.csh "\"$BOLD_json\""`	# Slice interleave order" >> ${Patient}.params
	
	if(`echo $BOLD_TR | awk '{if($1 >= 0.3) print 1; else print 0;}'` == 1) then
		echo "set BOLD_TR	= "${BOLD_TR}"		# time per frame in seconds" >> ${Patient}.params
		echo "set BOLD_TE	= ("${BOLD_TE}")		# epi echo time(s) in ms" >> ${Patient}.params
		echo "@ epidir	= 0		# 0 for inf->sup (product sequence default); 1 for sup->inf acquisition (Erbil sequence);" >> ${Patient}.params
	else
		echo "Assuming Allegra Erbil BOLD Data."
		echo "set BOLD_TR	= 2.064		# time per frame in seconds" >> ${Patient}.params
		echo "set BOLD_TE	= 0.0645		# time per slice in seconds (0 => will be computed assuming even spacing)" >> ${Patient}.params
		echo "@ epidir	= 1		# 0 for inf->sup (product sequence default); 1 for sup->inf acquisition (Erbil sequence);" >> ${Patient}.params
	endif

	if($?ME_ScanSets)  then
		echo "set ME_ScanSets = (" $ME_ScanSets ")	# the scan index for each multi echo run. Ordered by increasing TE." >> ${Patient}.params
	else
		echo "#set ME_ScanSets = ()	# the scan index for each multi echo run.  Ordered by increasing TE." >> ${Patient}.params
	endif
	
	echo "@ skip		= 4		# pre-functional BOLD frames for Generic Cross Bold" >> ${Patient}.params

	if($#BOLD_MB_Factor == 1) then
		echo "set BOLD_MB_Factor = "$BOLD_MB_Factor"		#set the multiband factor of the BOLD" >> ${Patient}.params
	endif
else
	echo "#set BOLD = ()		# filenames of the bold runs" >> ${Patient}.params
	echo "#set RunIndex = ()		# BOLD RunID" >> ${Patient}.params
	echo "#set FCProcIndex = ()		# BOLD RunID's to functionally preprocess" >> ${Patient}.params
	echo "#set BOLD_TR	= 		# time per frame in seconds" >> ${Patient}.params
	echo "#set BOLD_TE	= 		# epi echo time in ms" >> ${Patient}.params
	echo "#@ epidir	= 0		# 0 for inf->sup (product sequence default); 1 for sup->inf acquisition (Erbil sequence);" >> ${Patient}.params
	echo "#set imaflip	= 0		# 0 | x | y | xy" >> ${Patient}.params
	echo "#@ skip		= 4		# pre-functional BOLD frames for Generic Cross Bold" >> ${Patient}.params
	echo "#set BOLD_MB_Factor = 1		#set the multiband factor of the BOLD" >> ${Patient}.params
endif

set Scan = (`$PP_SCRIPTS/Utilities/detect_scan.csh "$NORDIC_BOLD_List" ${DICOM_Dir}`)

if($#Scan > 0) then
	##################################
	## Index the NORDIC BOLD's phase
	##################################
	echo "Set NORDIC BOLD..."

	set GoodScans = ()
	foreach Image($Scan)
		if($Image:e == "gz") set BOLD_json = ${DICOM_Dir}/$Image:r:r".json"
		if($Image:e == "nii") set BOLD_json = ${DICOM_Dir}/$Image:r".json"
			
		if(! -e $BOLD_json) then
			decho "Could not find a json to go with $Image. BIDS conversion must have failed or been done improperly." $DEBUG_FILE
			continue
		endif

		if(`grep ORIGINAL $BOLD_json` == "") then
			decho "${Image} is not an original series. Skipping..." $DEBUG_FILE
			continue
		endif

		if(`fslinfo ${DICOM_Dir}/$Image | grep dim4 | head -1 | awk '{print $2}'` <= 10) then
			decho "${Image} does not have enough frames. Ignoring." $DEBUG_FILE
			continue
		endif
	
		set GoodScans =($GoodScans \"$Image\")
		
	end
	
	echo "set NORDIC_BOLD = ($GoodScans)	#NORDIC BOLD phase timeseries" >> ${Patient}.params
	echo "set NORDIC_BOLD_NoiseVol = 3	#The noise volumes in the NORDIC BOLD phase timeseries" >> ${Patient}.params
endif

##################################
## Find the field mappings
##################################
echo "" >> ${Patient}.params
echo "############################" >> ${Patient}.params
echo "#	  Field Mapping & Registration" >> ${Patient}.params
echo "############################" >> ${Patient}.params

set Scan = (`$PP_SCRIPTS/Utilities/detect_scan.csh "$BOLD_FM_List" ${DICOM_Dir}`)
echo $PP_SCRIPTS/Utilities/detect_scan.csh "$BOLD_FM_List" ${DICOM_Dir}

if($#Scan > 1) then
	echo "Set BOLD Field Mapping..."
	set FirstEcho = `grep \"EchoTime\" ${DICOM_Dir}/$Scan[1]:r:r".json" | head -1 | cut -d: -f2 | cut -d, -f1`
	set SecondEcho = `grep \"EchoTime\" ${DICOM_Dir}/$Scan[2]:r:r".json" | head -1 | cut -d: -f2 | cut -d, -f1`
	set delta = `echo $FirstEcho $SecondEcho | awk '{print(sqrt(($2-$1)^2)*1000)}'`
	
	set fm_type = `echo $Scan[1] | tr "[a-z]" "[A-Z]"`
	
	if(`echo $fm_type | grep GRE` != "") then
		set fm_method = "gre_6dof"
	else if(`echo $fm_type | grep SPIN` != "") then
		set fm_method = "appa_6dof"
	else 
		set fm_method = "6dof"
	endif
	echo "Setting field mapping method to: " $fm_method
	
	if($?BOLD_dwell && $?BOLD_PED) then
		echo "set BOLD_dwell = (${BOLD_dwell})	#1/( (0019,1028) * (0051,100b) )*1000 / grappa factor NOTE: This is in ms." >> ${Patient}.params
		echo "set BOLD_ped		= ($BOLD_PED)" >> ${Patient}.params
	else
		echo "set BOLD_dwell = 0	#1/( (0019,1028) * (0051,100b) )*1000 / grappa factor NOTE: This is in ms." >> ${Patient}.params
		echo "set BOLD_ped		= -y" >> ${Patient}.params
	endif
	
	echo "set BOLD_fm = ("${Scan}")		# BOLD field mapping Images" >> ${Patient}.params
	echo "set BOLD_FieldMapping = "\"${fm_method}\""# gre: gradient echo fieldmapping; appa: ap pa spin echo field mapping using bbr; appa_6dof: ap pa field mapping using 6 dof registration; synth: compute field mapping and use 6dof registration; 6dof: no field mapping, use 6dof registration; none: no field mapping, use bbr registration" >> ${Patient}.params
	#need to be auto calculated in the future
	echo "set BOLD_delta = ${delta}	#time between echos for the field map magnitude images" >> ${Patient}.params
	echo "set BOLD_Reg_Target = T1	#Set the anatomical image to register metric modalities to (T1/T2/FLAIR)." >> ${Patient}.params
else if($#Scan == 0 && $?BOLD_dwell && $?BOLD_PED) then
	echo "Set BOLD Field Mapping to synth..."
	
	if($?BOLD_dwell && $?BOLD_PED) then
		echo "set BOLD_dwell = (${BOLD_dwell})	#1/( (0019,1028) * (0051,100b) )*1000 / grappa factor NOTE: This is in ms." >> ${Patient}.params
		echo "set BOLD_ped		= ($BOLD_PED)" >> ${Patient}.params
	else
		echo "set BOLD_dwell = 0	#1/( (0019,1028) * (0051,100b) )*1000 / grappa factor NOTE: This is in ms." >> ${Patient}.params
		echo "set BOLD_ped		= -y" >> ${Patient}.params
	endif
	
	echo "#set BOLD_fm = ()		# BOLD field mapping Images" >> ${Patient}.params
	echo "set BOLD_FieldMapping = "\"6dof\""# gre: gradient echo fieldmapping; appa: ap pa spin echo field mapping using bbr; appa_6dof: ap pa field mapping using 6 dof registration; synth: compute field mapping and use 6dof registration; 6dof: no field mapping, use 6dof registration; none: no field mapping, use bbr registration" >> ${Patient}.params
	#need to be auto calculated in the future
	echo "set BOLD_delta = 2.46	#time between echos for the field map magnitude images" >> ${Patient}.params
	echo "set BOLD_Reg_Target = T1	#Set the anatomical image to register metric modalities to (T1/T2/FLAIR)." >> ${Patient}.params

else
	echo "#set BOLD_dwell = 0	#1/( (0019,1028) * (0051,100b) )*1000 / grappa factor NOTE: This is in ms." >> ${Patient}.params
	echo "#set BOLD_ped		= -y" >> ${Patient}.params
	echo "#set BOLD_fm = ()		# BOLD field mapping Images" >> ${Patient}.params
	echo "#set BOLD_FieldMapping = "\"6dof\""# gre: gradient echo fieldmapping; appa: ap pa spin echo field mapping using bbr; appa_6dof: ap pa field mapping using 6 dof registration; synth: compute field mapping and use 6dof registration; 6dof: no field mapping, use 6dof registration; none: no field mapping, use bbr registration" >> ${Patient}.params
	echo "#set BOLD_delta = 0	#time between echos for the field map magnitude images" >> ${Patient}.params
	echo "#set BOLD_Reg_Target = T1	#Set the anatomical image to register metric modalities to (T1/T2/FLAIR)." >> ${Patient}.params

endif
	
set Scan = (`$PP_SCRIPTS/Utilities/detect_scan.csh "$ASL_FM_List" ${DICOM_Dir}`)
echo $PP_SCRIPTS/Utilities/detect_scan.csh "$ASL_FM_List" ${DICOM_Dir}

if($#Scan > 1) then
	echo "Set ASL Field Mapping..."
	set FirstEcho = `grep \"EchoTime\" ${DICOM_Dir}/$Scan[1]:r:r".json" | head -1 | cut -d: -f2 | cut -d, -f1`
	set SecondEcho = `grep \"EchoTime\" ${DICOM_Dir}/$Scan[2]:r:r".json" | head -1 | cut -d: -f2 | cut -d, -f1`
	set delta = `echo $FirstEcho $SecondEcho | awk '{print(sqrt(($2-$1)^2)*1000)}'`
	
	set fm_type = `echo $Scan[1] | tr "[a-z]" "[A-Z]"`
	
	if(`echo $fm_type | grep GRE` != "") then
		set fm_method = "gre_6dof"
	else if(`echo $fm_type | grep SPIN` != "") then
		set fm_method = "appa_6dof"
	else 
		set fm_method = "6dof"
	endif
	echo "Setting field mapping method to: " $fm_method
	
	if($?ASL_dwell && $?ASL_PED) then
		echo "set ASL_dwell = ("${ASL_dwell}")	#1/( (0018,0095) * (0051,100b) )*1000 / grappa factor NOTE: This is in ms." >> ${Patient}.params
		echo "set ASL_ped	= ($ASL_PED)" >> ${Patient}.params
	else
		echo "set ASL_dwell = 0	#1/( (0019,1028) * (0051,100b) )*1000 / grappa factor NOTE: This is in ms." >> ${Patient}.params
		echo "set ASL_ped		= -y" >> ${Patient}.params
	endif

	echo "set ASL_fm = ("${Scan}")		# ASL field mapping Images" >> ${Patient}.params
	echo "set ASL_FieldMapping = "\"${fm_method}\""# gre: gradient echo fieldmapping; appa: ap pa spin echo field mapping using bbr; appa_6dof: ap pa field mapping using 6 dof registration; synth: compute field mapping and use 6dof registration; 6dof: no field mapping, use 6dof registration; none: no field mapping, use bbr registration" >> ${Patient}.params
	echo "set ASL_delta = ${delta}	#time between echos for the field map magnitude images" >> ${Patient}.params
	echo "set ASL_Reg_Target = T1	#Set the anatomical image to register metric modalities to (T1/T2/FLAIR)." >> ${Patient}.params

else if($#Scan == 0 && $?ASL_dwell && $?ASL_PED) then
	echo "Set ASL Field Mapping to synth..."
	
	if($?ASL_dwell && $?ASL_PED) then
		echo "set ASL_dwell = ("${ASL_dwell}")	#1/( (0018,0095) * (0051,100b) )*1000 / grappa factor NOTE: This is in ms." >> ${Patient}.params
		echo "set ASL_ped	= ($ASL_PED)" >> ${Patient}.params
	else
		echo "set ASL_dwell = 0	#1/( (0019,1028) * (0051,100b) )*1000 / grappa factor NOTE: This is in ms." >> ${Patient}.params
		echo "set ASL_ped		= -y" >> ${Patient}.params
	endif

	echo "set ASL_fm = ("${Scan}")		# ASL field mapping Images" >> ${Patient}.params
	echo "set ASL_FieldMapping = "\"6dof\""# gre: gradient echo fieldmapping; appa: ap pa spin echo field mapping using bbr; appa_6dof: ap pa field mapping using 6 dof registration; synth: compute field mapping and use 6dof registration; 6dof: no field mapping, use 6dof registration; none: no field mapping, use bbr registration" >> ${Patient}.params
	echo "set ASL_delta = 2.46	#time between echos for the field map magnitude images" >> ${Patient}.params
	echo "set ASL_Reg_Target = T1	#Set the anatomical image to register metric modalities to (T1/T2/FLAIR)." >> ${Patient}.params

else
	echo "#set ASL_dwell = 0	#1/( (0019,1028) * (0051,100b) )*1000 / grappa factor NOTE: This is in ms." >> ${Patient}.params
	echo "#set ASL_ped		= -y" >> ${Patient}.params
	echo "#set ASL_fm = ()		# ASL field mapping Images" >> ${Patient}.params
	echo "#set ASL_FieldMapping = "\"6dof\""# gre: gradient echo fieldmapping; appa: ap pa spin echo field mapping using bbr; appa_6dof: ap pa field mapping using 6 dof registration; synth: compute field mapping and use 6dof registration; 6dof: no field mapping, use 6dof registration; none: no field mapping, use bbr registration" >> ${Patient}.params
	echo "#set ASL_delta = 0	#time between echos for the field map magnitude images" >> ${Patient}.params
	echo "#set ASL_Reg_Target = T1	#Set the anatomical image to register metric modalities to (T1/T2/FLAIR)." >> ${Patient}.params

endif

set Scan = (`$PP_SCRIPTS/Utilities/detect_scan.csh "$DTI_FM_List" ${DICOM_Dir}`)
echo $PP_SCRIPTS/Utilities/detect_scan.csh "$DTI_FM_List" ${DICOM_Dir}

if($#Scan > 1) then
	echo "Set DTI Field Mapping..."
	set FirstEcho = `grep \"EchoTime\" ${DICOM_Dir}/$Scan[1]:r:r".json" | head -1 | cut -d: -f2 | cut -d, -f1`
	set SecondEcho = `grep \"EchoTime\" ${DICOM_Dir}/$Scan[2]:r:r".json" | head -1 | cut -d: -f2 | cut -d, -f1`
	set delta = `echo $FirstEcho $SecondEcho | awk '{print(sqrt(($2-$1)^2)*1000)}'`
	
	set fm_type = `echo $Scan[1] | tr "[a-z]" "[A-Z]"`
	
	if(`echo $fm_type | grep GRE` != "") then
		set fm_method = "gre_6dof"
	else if(`echo $fm_type | grep SPIN` != "") then
		set fm_method = "appa_6dof"
	else 
		set fm_method = "6dof"
	endif
	echo "Setting field mapping method to: " $fm_method
	
	if($?DTI_dwell) then
		echo "set DTI_dwell = ("$DTI_dwell")	#total readout time of the DTI sequences." >> ${Patient}.params
		echo "set DTI_ped = ("$DTI_ped")		#phase encoding direction of the DTI images in order of detection" >> ${Patient}.params

		echo "set DTI_fm = ("${Scan}")		# DTI field mapping Images" >> ${Patient}.params
		echo "set DTI_FieldMapping = "\"${fm_method}\""# gre: gradient echo fieldmapping; appa: ap pa spin echo field mapping using bbr; appa_6dof: ap pa field mapping using 6 dof registration; synth: compute field mapping and use 6dof registration; 6dof: no field mapping, use 6dof registration; none: no field mapping, use bbr registration" >> ${Patient}.params
		echo "set DTI_delta = ${delta}	#time between echos for the field map magnitude images" >> ${Patient}.params
		echo "set DTI_Reg_Target = T1	#Set the anatomical image to register metric modalities to (T1/T2/FLAIR)." >> ${Patient}.params
	endif

else if($#Scan == 0 && $?DTI_dwell && $?DTI_ped) then
	echo "Set DTI Field Mapping to synth..."
	
	if($?DTI_dwell) then
		echo "set DTI_dwell = ("$DTI_dwell")	#total readout time of the DTI sequences." >> ${Patient}.params
		echo "set DTI_ped = ("$DTI_ped")		#phase encoding direction of the DTI images in order of detection" >> ${Patient}.params

		echo "set DTI_fm = ("${Scan}")		# DTI field mapping Images" >> ${Patient}.params
		echo "set DTI_FieldMapping = "\"6dof\""# gre: gradient echo fieldmapping; appa: ap pa spin echo field mapping using bbr; appa_6dof: ap pa field mapping using 6 dof registration; synth: compute field mapping and use 6dof registration; 6dof: no field mapping, use 6dof registration; none: no field mapping, use bbr registration" >> ${Patient}.params
		echo "set DTI_delta = 2.46	#time between echos for the field map magnitude images" >> ${Patient}.params
		echo "set DTI_Reg_Target = T1	#Set the anatomical image to register metric modalities to (T1/T2/FLAIR)." >> ${Patient}.params
	endif
else
	echo "#set DTI_dwell = ()	#total readout time of the DTI sequences." >> ${Patient}.params
	echo "#set DTI_ped = ()		#phase encoding direction of the DTI images in order of detection" >> ${Patient}.params

	echo "#set DTI_fm = ()		# field mapping Images" >> ${Patient}.params
	echo "#set DTI_FieldMapping = "\"6dof\""# gre: gradient echo fieldmapping; appa: ap pa spin echo field mapping using bbr; appa_6dof: ap pa field mapping using 6 dof registration; synth: compute field mapping and use 6dof registration; 6dof: no field mapping, use 6dof registration; none: no field mapping, use bbr registration" >> ${Patient}.params
	echo "#set DTI_delta = 0	#time between echos for the field map magnitude images" >> ${Patient}.params
	echo "#set DTI_Reg_Target = T1	#Set the anatomical image to register metric modalities to (T1/T2/FLAIR)." >> ${Patient}.params

endif

##################################
## Find the PET
##################################

echo "" >> ${Patient}.params
echo "############################" >> ${Patient}.params
echo "#	  PET Images" >> ${Patient}.params
echo "############################" >> ${Patient}.params

set Scan = (`$PP_SCRIPTS/Utilities/detect_pet_scan.csh "$FDG_List" ${DICOM_Dir}`)

if($#Scan > 0) then
	##################################
	## Index the FDG
	##################################
	echo "Set FDG..."
	set FramesUsed = ()
	set GoodScans = ()
	foreach Image($Scan)
		set length = `fslinfo ${DICOM_Dir}/$Image | grep dim4 | head -1 | awk '{print $2}'`
		
		if($length < 2) then
			decho "${Image} does not have enough frames. Ignoring." $DEBUG_FILE
			continue
		endif
		
		set GoodScans =($GoodScans \"$Image\")
		set FramesUsed = ($FramesUsed "1200")
	end
	echo "set FDG = ($GoodScans)	#FDG timeseries" >> ${Patient}.params
	echo "set FDG_Target = (T1)	#FDG registration Target (usually T1)" >> ${Patient}.params
	echo "set FDG_Duration = ($FramesUsed)	#FDG time in seconds used to model each run after peak" >> ${Patient}.params
	echo "set FDG_SumMethod = 2	#How to sum the FDG frames. 1) Peak, 2) duration from end, 3) Timeframe" >> ${Patient}.params
	echo "set FDG_Smoothing = 2	#FDG smoothing amount in mm to help registration" >> ${Patient}.params
	echo "set FDG_FrameAlign = 0	#attempt to align all the volume to the last frame"  >> ${Patient}.params
	echo "set FDG_RegMethod = corratio	#What cost function to use for FDG registrations. Can be:  normmi corratio mutualinfo normcorr leastsq" >> ${Patient}.params
else
	echo "set FDG = ()	#FDG timeseries" >> ${Patient}.params
	echo "#set FDG_Target = (T1)	#FDG registration Target (usually T1)" >> ${Patient}.params
	echo "#set FDG_Duration = (1200)	#FDG time in seconds used to model each run" >> ${Patient}.params
	echo "#set FDG_SumMethod = 2	#How to sum the H2O frames. 1) Peak, 2) duration from end, 3) Timeframe" >> ${Patient}.params
	echo "#set FDG_Smoothing = 3	#FDG smoothing amount in mm to help registration" >> ${Patient}.params
	echo "#set FDG_FrameAlign = 0	#attempt to align all the volume to the last frame"  >> ${Patient}.params
	echo "#set FDG_RegMethod = corratio	#What cost function to use for FDG registrations. Can be:  normmi corratio mutualinfo normcorr leastsq" >> ${Patient}.params
endif

#find the O2
set Scan = (`$PP_SCRIPTS/Utilities/detect_pet_scan.csh "$O2_List" ${DICOM_Dir}`)

if($#Scan > 0) then
	##################################
	## Index the O2
	##################################
	echo "Set O2..."
	set FramesUsed = ()
	set GoodScans = ()
	foreach Image($Scan)
		set length = `fslinfo ${DICOM_Dir}/$Image | grep dim4 | head -1 | awk '{print $2}'`
		
		if($length < 2) then
			decho "${Image} does not have enough frames. Ignoring." $DEBUG_FILE
			continue
		endif
		
		set GoodScans =($GoodScans \"$Image\")
		set FramesUsed = ($FramesUsed "60")
	end
	echo "set O2 = ($GoodScans)	#O2 timeseries" >> ${Patient}.params
	echo "set O2_Target = (T1 FDG)	#O2 registration path." >> ${Patient}.params
	echo "set O2_Duration = ($FramesUsed)	#O2 time in seconds used to model each run after peak" >> ${Patient}.params
	echo "set O2_SumMethod = 1	#How to sum the O2 frames. 1) Peak, 2) duration from end, 3) Timeframe" >> ${Patient}.params
	echo "set O2_Smoothing = 2	#O2 smoothing amount in mm to help registration" >> ${Patient}.params
	echo "set O2_FrameAlign = 0	#attempt to align all the volume to the last frame"  >> ${Patient}.params
	echo "set O2_RegMethod = corratio	#What cost function to use for O2 registrations. Can be:  normmi corratio mutualinfo normcorr leastsq" >> ${Patient}.params
else
	echo "set O2 = ()	#O2 timeseries" >> ${Patient}.params
	echo "#set O2_Target = (T1 FDG)	#O2 registration path." >> ${Patient}.params
	echo "#set O2_Duration = (60)	#O2 time in seconds used to model each run after peak" >> ${Patient}.params
	echo "#set O2_SumMethod = 1	#How to sum the O2 frames. 1) Peak, 2) duration from end, 3) Timeframe" >> ${Patient}.params
	echo "#set O2_Smoothing = 2	#O2 smoothing amount in mm to help registration" >> ${Patient}.params
	echo "#set O2_FrameAlign = 0	#attempt to align all the volume to the last frame"  >> ${Patient}.params
	echo "#set O2_RegMethod = corratio	#What cost function to use for O2 registrations. Can be:  normmi corratio mutualinfo normcorr leastsq" >> ${Patient}.params
endif

#find the CO
set Scan = (`$PP_SCRIPTS/Utilities/detect_pet_scan.csh "$CO_List" ${DICOM_Dir}`)

if($#Scan > 0) then
	##################################
	## Index the CO
	##################################
	echo "Set CO..."
	set FramesUsed = ()
	set GoodScans = ()
	foreach Image($Scan)
		set length = `fslinfo ${DICOM_Dir}/$Image | grep dim4 | head -1 | awk '{print $2}'`
 		
 		if($length < 1) then
 			decho "${Image} does not have enough frames. Ignoring." $DEBUG_FILE
 			continue
 		endif
		
		set GoodScans =($GoodScans \"$Image\")
		set FramesUsed = ($FramesUsed "60")
	end
	echo "set CO = ($GoodScans)	#CO timeseries" >> ${Patient}.params
	echo "set CO_Target = (T1 FDG O2)	#CO registration path." >> ${Patient}.params
	echo "set CO_Duration = ($FramesUsed)	#CO time in seconds used to model each run after peak" >> ${Patient}.params
	echo "set CO_SumMethod = 1	#How to sum the CO frames. 1) Peak, 2) duration from end, 3) Timeframe" >> ${Patient}.params
	echo "set CO_Smoothing = 2	#CO smoothing amount in mm to help registration" >> ${Patient}.params
	echo "set CO_FrameAlign = 0	#attempt to align all the volume to the last frame"  >> ${Patient}.params
	echo "set CO_RegMethod = corratio	#What cost function to use for CO registrations. Can be:  normmi corratio mutualinfo normcorr leastsq" >> ${Patient}.params
else
	echo "set CO = ()	#CO timeseries" >> ${Patient}.params
	echo "#set CO_Target = (T1 FDG)	#CO registration path." >> ${Patient}.params
	echo "#set CO_Duration = (60)	#CO time in seconds used to model each run after peak" >> ${Patient}.params
	echo "#set CO_SumMethod = 1	#How to sum the CO frames. 1) Peak, 2) duration from end, 3) Timeframe" >> ${Patient}.params
	echo "#set CO_Smoothing = 2	#CO smoothing amount in mm to help registration" >> ${Patient}.params
	echo "#set CO_FrameAlign = 0	#attempt to align all the volume to the last frame"  >> ${Patient}.params
	echo "#set CO_RegMethod = corratio	#What cost function to use for CO registrations. Can be:  normmi corratio mutualinfo normcorr leastsq" >> ${Patient}.params
endif

#find the H2O
set Scan = (`$PP_SCRIPTS/Utilities/detect_pet_scan.csh "$H2O_List" ${DICOM_Dir}`)

if($#Scan > 0) then
	##################################
	## Index the H2O
	##################################
	echo "Set H2O..."
	set FramesUsed = ()
	set GoodScans = ()
	foreach Image($Scan)
		set length = `fslinfo ${DICOM_Dir}/$Image | grep dim4 | head -1 | awk '{print $2}'`
		
		if($length < 2) then
			decho "${Image} does not have enough frames. Ignoring." $DEBUG_FILE
			continue
		endif
		
		set GoodScans =($GoodScans \"$Image\")
		set FramesUsed = ($FramesUsed "60")
	end
	echo "set H2O = ($GoodScans)	#H2O timeseries" >> ${Patient}.params
	echo "set H2O_Target = (T1 FDG)	#H2O registration path." >> ${Patient}.params
	echo "set H2O_Duration = ($FramesUsed)	#H2O time in seconds used to model each run after peak" >> ${Patient}.params
	echo "set H2O_SumMethod = 1	#How to sum the H2O frames. 1) Peak, 2) duration from end, 3) Timeframe" >> ${Patient}.params
	echo "set H2O_Smoothing = 2	#H2O smoothing amount in mm to help registration" >> ${Patient}.params
	echo "set H2O_FrameAlign = 0	#attempt to align all the volume to the last frame"  >> ${Patient}.params
	echo "set H2O_RegMethod = corratio	#What cost function to use for H2O registrations. Can be:  normmi corratio mutualinfo normcorr leastsq" >> ${Patient}.params
else
	echo "set H2O = ()	#H2O timeseries" >> ${Patient}.params
	echo "#set H2O_Target = (T1 FDG)	#H2O registration path." >> ${Patient}.params
	echo "#set H2O_Duration = (60)	#H2O time in seconds used to model each run after peak" >> ${Patient}.params
	echo "#set H2O_SumMethod = 1	#How to sum the H2O frames. 1) Peak, 2) duration from end, 3) Timeframe" >> ${Patient}.params
	echo "#set H2O_Smoothing = 2	#H2O smoothing amount in mm to help registration" >> ${Patient}.params
	echo "#set H2O_FrameAlign = 0	#attempt to align all the volume to the last frame"  >> ${Patient}.params
	echo "#set H2O_RegMethod = corratio	#What cost function to use for H2O registrations. Can be:  normmi corratio mutualinfo normcorr leastsq" >> ${Patient}.params
endif

#find the PIB
set Scan = (`$PP_SCRIPTS/Utilities/detect_pet_scan.csh "$PIB_List" ${DICOM_Dir}`)

if($#Scan > 0) then
	##################################
	## Index the PIB
	##################################
	echo "Set PIB..."
	set FramesUsed = ()
	set GoodScans = ()
	foreach Image($Scan)
		set length = `fslinfo ${DICOM_Dir}/$Image | grep dim4 | head -1 | awk '{print $2}'`
		
		if($length < 2) then
			decho "${Image} does not have enough frames. Ignoring." $DEBUG_FILE
			continue
		endif
		
		set GoodScans =($GoodScans \"$Image\")
		set FramesUsed = ($FramesUsed "2400-3600")
	end
	echo "set PIB = ($GoodScans)	#PIB timeseries" >> ${Patient}.params
	echo "set PIB_Target = (T1)	#PIB registration path." >> ${Patient}.params
	echo "set PIB_Duration = ($FramesUsed)	#PIB time in seconds used to model each run after peak" >> ${Patient}.params
	echo "set PIB_SumMethod = 3	#How to sum the PIB frames. 1) Peak, 2) duration from end, 3) Timeframe" >> ${Patient}.params
	echo "set PIB_Smoothing = 2	#PIB smoothing amount in mm to help registration" >> ${Patient}.params
	echo "set PIB_FrameAlign = 0	#attempt to align all the volume to the last frame"  >> ${Patient}.params
	echo "set PIB_RegMethod = corratio	#What cost function to use for PIB registrations. Can be:  normmi corratio mutualinfo normcorr leastsq" >> ${Patient}.params
else
	echo "set PIB = ()	#PIB timeseries" >> ${Patient}.params
	echo "#set PIB_Target = (T1)	#PIB registration path." >> ${Patient}.params
	echo "#set PIB_Duration = (2400-3600)	#PIB time in seconds used to model each run after peak" >> ${Patient}.params
	echo "#set PIB_SumMethod = 3	#How to sum the PIB frames. 1) Peak, 2) duration from end, 3) Timeframe" >> ${Patient}.params
	echo "#set PIB_Smoothing = 2	#PIB smoothing amount in mm to help registration" >> ${Patient}.params
	echo "#set PIB_FrameAlign = 0	#attempt to align all the volume to the last frame"  >> ${Patient}.params
	echo "#set PIB_RegMethod = corratio	#What cost function to use for PIB registrations. Can be:  normmi corratio mutualinfo normcorr leastsq" >> ${Patient}.params
endif

#find the TAU
set Scan = (`$PP_SCRIPTS/Utilities/detect_pet_scan.csh "$TAU_List" ${DICOM_Dir}`)

if($#Scan > 0) then
	##################################
	## Index the TAU
	##################################
	echo "Set TAU..."
	set FramesUsed = ()
	set GoodScans = ()
	foreach Image($Scan)
		set length = `fslinfo ${DICOM_Dir}/$Image | grep dim4 | head -1 | awk '{print $2}'`
		
		if($length < 2) then
			decho "${Image} does not have enough frames. Ignoring." $DEBUG_FILE
			continue
		endif
		
		set GoodScans =($GoodScans \"$Image\")
		set FramesUsed = ($FramesUsed "4800-6000")
	end
	echo "set TAU = ($GoodScans)	#TAU timeseries" >> ${Patient}.params
	echo "set TAU_Target = (T1)	#TAU registration path." >> ${Patient}.params
	echo "set TAU_Duration = ($FramesUsed)	#TAU time in seconds used to model each run after peak" >> ${Patient}.params
	echo "set TAU_SumMethod = 3	#How to sum the TAU frames. 1) Peak, 2) duration from end, 3) Timeframe" >> ${Patient}.params
	echo "set TAU_Smoothing = 2	#TAU smoothing amount in mm to help registration" >> ${Patient}.params
	echo "set TAU_FrameAlign = 0	#attempt to align all the volume to the last frame"  >> ${Patient}.params
	echo "set TAU_RegMethod = corratio	#What cost function to use for TAU registrations. Can be:  normmi corratio mutualinfo normcorr leastsq" >> ${Patient}.params
else
	echo "set TAU = ()	#TAU timeseries" >> ${Patient}.params
	echo "#set TAU_Target = (T1)	#TAU registration path." >> ${Patient}.params
	echo "#set TAU_Duration = (4800-6000)	#TAU time in seconds used to model each run after peak" >> ${Patient}.params
	echo "#set TAU_SumMethod = 3	#How to sum the TAU frames. 1) Peak, 2) duration from end, 3) Timeframe" >> ${Patient}.params
	echo "#set TAU_Smoothing = 2	#TAU smoothing amount in mm to help registration" >> ${Patient}.params
	echo "#set TAU_FrameAlign = 0	#attempt to align all the volume to the last frame"  >> ${Patient}.params
	echo "#set TAU_RegMethod = corratio	#What cost function to use for TAU registrations. Can be:  normmi corratio mutualinfo normcorr leastsq" >> ${Patient}.params
endif

#find the FBX
set Scan = (`$PP_SCRIPTS/Utilities/detect_pet_scan.csh "$FBX_List" ${DICOM_Dir}`)

if($#Scan > 0) then
	##################################
	## Index the FBX
	##################################
	echo "Set FBX..."
	set FramesUsed = ()
	set GoodScans = ()
	foreach Image($Scan)
		set length = `fslinfo ${DICOM_Dir}/$Image | grep dim4 | head -1 | awk '{print $2}'`
		
		if($length < 2) then
			decho "${Image} does not have enough frames. Ignoring." $DEBUG_FILE
			continue
		endif
		
		set GoodScans =($GoodScans \"$Image\")
		set FramesUsed = ($FramesUsed "4800-6000")
	end
	echo "set FBX = ($GoodScans)	#FBX timeseries" >> ${Patient}.params
	echo "set FBX_Target = (T1)	#FBX registration path." >> ${Patient}.params
	echo "set FBX_Duration = ($FramesUsed)	#FBX time in seconds used to model each run after peak" >> ${Patient}.params
	echo "set FBX_SumMethod = 3	#How to sum the FBX frames. 1) Peak, 2) duration from end, 3) Timeframe" >> ${Patient}.params
	echo "set FBX_Smoothing = 2	#FBX smoothing amount in mm to help registration" >> ${Patient}.params
	echo "set FBX_FrameAlign = 0	#attempt to align all the volume to the last frame"  >> ${Patient}.params
	echo "set FBX_RegMethod = corratio	#What cost function to use for FBX registrations. Can be:  normmi corratio mutualinfo normcorr leastsq" >> ${Patient}.params
else
	echo "set FBX = ()	#FBX timeseries" >> ${Patient}.params
	echo "#set FBX_Target = (T1)	#FBX registration path." >> ${Patient}.params
	echo "#set FBX_Duration = (4800-6000)	#FBX time in seconds used to model each run after peak" >> ${Patient}.params
	echo "#set FBX_SumMethod = 3	#How to sum the FBX frames. 1) Peak, 2) duration from end, 3) Timeframe" >> ${Patient}.params
	echo "#set FBX_Smoothing = 2	#FBX smoothing amount in mm to help registration" >> ${Patient}.params
	echo "#set FBX_FrameAlign = 0	#attempt to align all the volume to the last frame"  >> ${Patient}.params
	echo "#set FBX_RegMethod = corratio	#What cost function to use for FBX registrations. Can be:  normmi corratio mutualinfo normcorr leastsq" >> ${Patient}.params
endif
##################################
## That's all the scans
##################################

## Location variables

echo "" >> ${Patient}.params
echo "############################" >> ${Patient}.params
echo "#Paths and namings" >> ${Patient}.params
echo "############################" >> ${Patient}.params
echo "set dcmroot = ${dcmroot}" >> ${Patient}.params
echo "set patid = "`basename $cwd` >> ${Patient}.params
echo "#set day1_patid = ${Patient}" >> ${Patient}.params
echo "#set day1_path = "\$cwd:h"/"\${day1_patid} >> ${Patient}.params

# if($TargetAtlas == 0) then
# 	echo set target = \"\" >> ${Patient}.params
# endif

echo ""  >> ${Patient}.params
echo "################################" >> ${Patient}.params
echo "# fcMRI preprocessing parameters" >> ${Patient}.params
echo "################################" >> ${Patient}.params
echo "set anat_avet	= 50		# threshold for anat_ave format" >> ${Patient}.params
echo "set CSF_sd1t	= 25		# threshold for CSF voxels in sd1 image" >> ${Patient}.params
echo "set CSF_lcube	= 3		# cube dimension (in voxels) used by qntv_4dfp" >> ${Patient}.params
echo "set CSF_svdt	= .2		# limit regressor covariance condition number to (1./{})^2" >> ${Patient}.params
echo "set WM_lcube	= 5		# cube dimension (in voxels) used by qntv_4dfp" >> ${Patient}.params
echo "set WM_svdt	= .15		# limit regressor covariance condition number to (1./{})^2" >> ${Patient}.params

rm -f dump temp
exit 0
