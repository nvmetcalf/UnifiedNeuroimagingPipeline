#!/bin/bash
################################################################################
# This program registers the 3 subsequence of the PIB images (  c1 c2 c3 ) 
# to each other and to the MR images to create t4 files needed for ROI analysis
#                                                                              
################################################################################
# Yi Su, 09/06/2011                                                            

idstr='$Id: PIBSMPRREG,v 1.2 2012/08/21 21:11:00 suy Exp $'
echo $idstr

ecatfstr=$1	# PET image file (.4dfp.img)
mr=$2		# Anatomical MR file (usually T1.mgz)
program=`basename $0`
#any argument after the third are ignored
petname=`basename $ecatfstr`
petdir=`dirname $ecatfstr`
petroot=${petname%.*}
petroot=${petroot%.*}
mrname=`basename $mr`
mrdir=`dirname $mr`
mrroot=${mrname%.*}

################################
# Converting mgz file to 4dfp file
echo "============================================================="
echo Converting mgz file to 4dfp file
echo 
mgzto4dfp $mr
mrroot=${mrroot}"001"

################################
# Within group registration
echo "============================================================="
echo Within group registration
echo 

groups=c
echo RUNNING
echo cross pet resolve 4dfp for group $groups to create ${petroot}"_"${groups}[123]
echo cross_pet_resolve_4dfp -g0.6 -mask ${petroot}"_"${groups} ${petroot}"_"${groups}[123]".4dfp.img"
cross_pet_resolve_4dfp -g0.6 -mask ${petroot}"_"${groups} ${petroot}"_"${groups}[123]".4dfp.img"


################################
# Creating group sum images petroot_c

echo "============================================================="
echo Creating group sum images petroot_c
echo 

echo t4imgs_4dfp ${petroot}"_"${groups}".sub" ${petroot}"_"${groups} -O${petroot}"_"${groups}"1.4dfp.img"
     t4imgs_4dfp ${petroot}"_"${groups}".sub" ${petroot}"_"${groups} -O${petroot}"_"${groups}"1.4dfp.img"

###################################################################################################
echo "============================================================="
echo PET to MR registration
echo 

mrg=0.9					# This is the MR gauss FWHM (g9)
mrgx=`echo $mrg | awk '{print 10*$1}'`		# This is the MR filter extension

b=5						# This is the PET gauss (imgblur) FWHM (b50)
bx=`echo $b | awk '{print 10*$1}'`		# This is the PET filter extension

###################################################################################################
# PREPROCESS MR

if [ ! -e ${mrroot}"_to_711-2B_t4" ]
then
	mpr2atl_4dfp $mrdir/$mrroot
fi
gauss_4dfp $mrroot $mrg			# Gaussian blur the MR image
msktgen_4dfp $mrroot			# Generate mrroot_mskt file (MR mask) for registration

###################################################################################################
# PREPROCESS PET IMAGE(S)

echo " " 
echo imgblur_4dfp ${petroot}"_"${groups} $b
     imgblur_4dfp ${petroot}"_"${groups} $b
echo maskimg_4dfp ${petroot}"_"${groups}"_b"${bx} ${petroot}"_"${groups}"_b"${bx} -p0.1 ${petroot}"_"${groups}"_msk"
     maskimg_4dfp ${petroot}"_"${groups}"_b"${bx} ${petroot}"_"${groups}"_b"${bx} -p0.1 ${petroot}"_"${groups}"_msk"
nsl=`gawk '/matrix size \[3\]/ {print $NF}' ${petroot}"_"${groups[$g]}".4dfp.ifh"`
msl=5
echo "Masking 1 to "${msl}" slices from bottom in z to create mskz image"
zero_slice_4dfp ${petroot}"_"${groups}"_msk" z 1 $msl  ${petroot}"_"${groups}"_mskz"
k=$((nsl-msl+1))
echo Masking $k to $nsl slices from top in z to create final msk.img
zero_slice_4dfp ${petroot}"_"${groups}"_mskz" z $k $nsl ${petroot}"_"${groups}"_msk"


##################################################################

log=${program}"_"${petroot}"_"${mrroot}".log"
touch	$log
date >> $log
echo ;
echo imgreg_4dfp OUTPUT to $log ;
echo "Please wait"

##################################################################
# COMPUTE PET  TO MR REGISTRATIONS
oristr=( T C S )
redo=1
search=2
coarse=2
nfine=1
hessian=1

t4file1=${petroot}"_c_to_"${mrroot}"_t4"
t4file2=${mrroot}"_to_"${petroot}"_c_t4"

if [ ! -e $t4file1 ]
then
	ori=`awk '/orientation/{print $NF - 1}' ${mrroot}".4dfp.ifh"`
	ori=$((ori-1))
	t4_inv ${RELEASE}/${oristr[$ori]}"_t4" temp$$"_t4"
	ori=`awk '/orientation/{print $NF - 1}' ${petroot}".4dfp.ifh"`
	ori=$((ori-1))
	t4_mul ${RELEASE}/${oristr[$ori]}"_t4" temp$$"_t4" $t4file1
	rm temp$$_t4			
fi
if [ ! -e $t4file2 ]
then
	ori=`awk '/orientation/{print $NF - 1}' ${petroot}".4dfp.ifh"`
	ori=$((ori-1))
	t4_inv ${RELEASE}/${oristr[$ori]}"_t4" temp$$"_t4"
	ori=`awk '/orientation/{print $NF - 1}' ${mrroot}".4dfp.ifh"`
	ori=$((ori-1))
	t4_mul ${RELEASE}/${oristr[$ori]}"_t4" temp$$"_t4" $t4file2
	rm temp$$_t4			
fi
mri=${mrroot}"_g"$mrgx
mrm=${mrroot}"_mskt"
peti=${petroot}"_c_b"$bx
petm=${petroot}"_"${groups}"_msk"

for (( k=0; k<search; k++ ))
do
	mode=$((4096+3))
	echo >> $log ; echo "search k="$k "search="$search "mode = 4096 + 3" >> $log
	echo imgreg_4dfp $mri  $mrm $peti $petm $t4file1 $mode
	echo imgreg_4dfp $mri  $mrm $peti $petm $t4file1 $mode >> $log
	     imgreg_4dfp $mri  $mrm $peti $petm $t4file1 $mode >> $log

	echo imgreg_4dfp $peti $petm $mri  $mrm $t4file2 $mode
	echo imgreg_4dfp $peti $petm $mri  $mrm $t4file2 $mode >> $log
	     imgreg_4dfp $peti $petm $mri  $mrm $t4file2 $mode >> $log

done
			
for (( k=0; k<coarse; k++ ))
do
	mode=$((3072+3))
	echo >> $log ; echo "coarse k="$k "coarse="$coarse "mode = 3072 + 3" >> $log
	echo imgreg_4dfp $mri  $mrm $peti $petm $t4file1 $mode
	echo imgreg_4dfp $mri  $mrm $peti $petm $t4file1 $mode >> $log
	     imgreg_4dfp $mri  $mrm $peti $petm $t4file1 $mode >> $log

	echo imgreg_4dfp $peti $petm $mri  $mrm $t4file2 $mode
	echo imgreg_4dfp $peti $petm $mri  $mrm $t4file2 $mode >> $log
	     imgreg_4dfp $peti $petm $mri  $mrm $t4file2 $mode >> $log

done

for (( k=0; k<nfine; k++ ))
do
	mode=$((2048+3))
	echo >> $log ; echo "nfile k="$k "search="$nfile "mode = 2048 + 3" >> $log
	echo imgreg_4dfp $mri  $mrm $peti $petm $t4file1 $mode
	echo imgreg_4dfp $mri  $mrm $peti $petm $t4file1 $mode >> $log
	     imgreg_4dfp $mri  $mrm $peti $petm $t4file1 $mode >> $log

	echo imgreg_4dfp $peti $petm $mri  $mrm $t4file2 $mode
	echo imgreg_4dfp $peti $petm $mri  $mrm $t4file2 $mode >> $log
	     imgreg_4dfp $peti $petm $mri  $mrm $t4file2 $mode >> $log

done
			
if [ $hessian ] 
then
	mode=$((8192+2048+3))
	echo >> $log ; echo "hessian k="$k "hessian="$hessian "mode = 8192 + 2048 + 3" >> $log
	echo imgreg_4dfp $mri  $mrm $peti $petm $t4file1 $mode
	echo imgreg_4dfp $mri  $mrm $peti $petm $t4file1 $mode >> $log
	     imgreg_4dfp $mri  $mrm $peti $petm $t4file1 $mode >> $log

	echo imgreg_4dfp $peti $petm $mri  $mrm $t4file2 $mode
	echo imgreg_4dfp $peti $petm $mri  $mrm $t4file2 $mode >> $log
	     imgreg_4dfp $peti $petm $mri  $mrm $t4file2 $mode >> $log

fi

rm *_mskz*
rm *"_b"$bx".4dfp."*

##################################################################################################
#Reconciliation: t4_resolve target t4 files and movelog are created

movlog=${petroot}"_PIB_MR_mov.log"
echo t4_resolve $mrroot ${petroot}"_c" -oMR
t4_resolve $mrroot ${petroot}"_c" -oMR >> $movlog
error=`gawk '/estimate total rotation error/{rot = $5} /estimate total translation error/{trans = $5} END{printf ("%3d", 100*(trans + 1.4*rot))}' $movlog`
echo                           >> $movlog
echo " ERROR = " $error
echo " ERROR = " $error >> $movlog
if (( $error < 100 )) 
then
	echo "ERROR is LOW, image reconciliation is good"
	echo "ERROR is LOW, image reconciliation is good"             >> $movlog
elif (( $error > 200 )) 
then
	echo "ERROR is HIGH, cross-image reconciliation is poor"
	echo "ERROR is HIGH, cross-image reconciliation is poor"      >> $movlog
else
	echo "ERROR is MED, cross-image reconciliation is acceptable"
	echo "ERROR is MED, cross-image reconciliation is acceptable" >> $movlog
fi


for (( i=1; i<4; i++ ))
do
	echo t4_mul ${petroot}"_"${groups}$i"_to_"${petroot}"_"${groups}"_t4" ${petroot}"_"${groups}"_to_MR_t4" ${petroot}"_"${groups}$i"_to_MR_t4"
	t4_mul ${petroot}"_"${groups}$i"_to_"${petroot}"_"${groups}"_t4" ${petroot}"_"${groups}"_to_MR_t4" ${petroot}"_"${groups}$i"_to_MR_t4"
done

exit $?
