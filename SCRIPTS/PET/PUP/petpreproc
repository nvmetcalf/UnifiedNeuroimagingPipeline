#!/bin/bash
################################################################################
# PET file preprocessing to generate 4dfp format PET data for further analysis #
# using PET processing pipelines.                                              #
#                                                                              #
# USAGE:								       #
#	petpreproc paramsfn                                                    #
#                                                                              #
# This script reads a params file that includes:                               #
# 	petdir:	absolute path of the pet data location	 	               #
#	petfn:	file name of the pet data				       #
#		for DICOM data, petfn = "*.dcm" or "*.ima"                     #
#		for ecat data, petfn = ???.v                                   #
#               for Siemens InterFile Format data, petfn = ???.mhdr            #
#	format: original format of pet data                                    #
#		format = 0 (DICOM) 					       #
#		format = 1 (ecat)					       #
#		format = 2 (Siemens InterFile)                                 #
#	        format = 5 (nih nifti format)				       #
#	filterxy: fwhm of in-plane filtering				       #
#	filterz:  fwhm of axial filtering				       #
#                                                                              #
# The output of this program would be a 4dfp quadruplet and a .info file that  #
# contains the frame timing and decay correction info.                         #
################################################################################
# Yi Su, 05/11/2017
VERSION=1.1

if [ "$1" == "--version" ]; then
    echo $VERSION
    exit 0
fi

die(){
    echo >&2 "$@"
    exit -1
}

program=`basename $0`
idstr='$Id: '$program',v '$VERSION' Thu May 11 12:54:32 CDT 2017 suy $'
echo $idstr

if [ $# -lt 1 ]
then
	echo "Usage: $program paramsfn"
	exit -1
fi

paramsfn=$1

# Read PARAMS file
source $paramsfn || die "$program ERROR: Cannot source params file $paramsfn"

# Further development will improve this program which checks the validity of
# the inputs specified in the params file

# File conversion
if (( $format == 0 ))
then
	dcm_pet -n -a  -b $petid $petdir/$petfn || die "$program ERROR: dcm_pet -n -a  -b $petid $petdir/$petfn failed"
elif (( $format == 1 ))
then
	ecatto4dfp $petdir/$petfn $petid || die "$program ERROR: ecatto4dfp $petdir/$petfn $petid failed"
elif (( $format == 2 ))
then
	sif_4dfp $petdir/$petfn $petid || die "$program ERROR: sif_4dfp $petdir/$petfn $petid failed"
elif (( $format == 5 ))
then
	nih_4dfp $petdir/$petfn $petid $half_life || die "$program ERROR: nih_4dfp $petdir/$petfn $petid $halflife failed"
fi
# Generate .info file
PETinfo $petid $format $delay || die "$program ERROR: PETinfo $petid $format $delay failed"

# rescale PET image if needed
nf=`wc -l ${petid}.info | gawk '{print $1}'`

if [ "$nf" -eq 1 ]
then
	# Create sumall 4dfp ( as a copy of the original single frame data )
	ext=( img img.rec ifh hdr )
	for (( i=0; i<4; i++ ))
	do
		cp ${petid}.4dfp.${ext[$i]} ${petid}_sumall.4dfp.${ext[$i]}
	done
else
	sum_pet_4dfp ${petid} 1 $nf -h${half_life} ${petid}_sumall || die "$program ERROR: sum_pet_4dfp ${petid} 1 $nf -d -h${half_life} ${petid}_sumall failed"
fi
mint=`qnt_4dfp ${petid}_sumall ${petid}_sumall | gawk '/Mean/ {print $2}'`
if (( $(echo "$mint < 1" |bc -l) ))
then
	sclfctr=$(echo "scale=6; 1000/$mint" | bc)
	scale_4dfp ${petid} $sclfctr
fi
rm ${petid}_sumall.4dfp.*

# Filtering if requested
if [ -n "$filterxy" ] && [ -n "$filterz" ]
then
	if [ "$filterxy" != "$filterz" ]
	then
		tmp=$(echo "scale=6; $filterxy*10+.499999" | bc)
		filterxyname=${tmp%.*}
		tmp=$(echo "scale=6; $filterz*10+.499999" | bc)
		filterzname=${tmp%.*}
		imgblur_4dfp -xy $petid $filterxy || die "$program ERROR: imgblur_4dfp -xy $petid $filterxy failed"
		imgblur_4dfp -z ${petid}_bxy$filterxyname $filterz || die "$program ERROR: imgblur_4dfp -z ${petid}_bxy$filterxyname $filterz failed"

		ext=( img img.rec ifh hdr )
		for (( i=0; i<4; i++ ))
		do
			cp ${petid}_bxy${filterxyname}_bz${filterzname}.4dfp.${ext[$i]} ${petid}n.4dfp.${ext[$i]}
		done
		rm ${petid}_bxy$filterxyname.4dfp.*
		rm ${petid}_bxy${filterxyname}_bz${filterzname}.4dfp.*
	else
		tmp=$(echo "scale=6; $filterxy*10+.499999" | bc)
		filtername=${tmp%.*}
		imgblur_4dfp ${petid} $filterxy || die "$program ERROR: imgblur_4dfp ${petid} $filterxy failed"
		ext=( img img.rec ifh hdr )
		for (( i=0; i<4; i++ ))
		do
			cp ${petid}_b${filtername}.4dfp.${ext[$i]} ${petid}n.4dfp.${ext[$i]}
		done
		rm ${petid}_b${filtername}.4dfp.*
	fi
	cp ${petid}.info ${petid}n.info
	petid=${petid}n
	echo "petid=${petid}" >> $paramsfn
elif [ -n "$filterxy" ] || [  -n "$filterz" ]
then
	ERR="Both xy and z filter size are needed!"
	echo $ERR
	die "$program ERROR: $ERR"
fi


