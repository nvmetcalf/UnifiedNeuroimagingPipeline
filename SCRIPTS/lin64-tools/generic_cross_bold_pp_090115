#!/bin/csh -f
#$Header: /data/petsun4/data1/solaris/csh_scripts/RCS/generic_cross_bold_pp_090115,v 1.20 2020/10/16 22:25:58 tanenbauma Exp $
#$Log: generic_cross_bold_pp_090115,v $
# Revision 1.20  2020/10/16  22:25:58  tanenbauma
# Prevent deletion of raw image if $E4dfp == 1
#
# Revision 1.19  2020/07/23  02:41:29  avi
# multiple Aaron updates - BiasField, dcm2niix, deband_4dfp logic
#
# Revision 1.18  2018/08/17  05:49:41  avi
# invoke with -f
#
# Revision 1.17  2017/08/17  22:29:14  avi
# option -BiasField
#
# Revision 1.16  2016/05/30  01:18:01  avi
# new params variable $MBfac
#
# Revision 1.15  2014/07/14  00:28:05  avi
# read $interleave from params
# $new flag $nounpack
#
# Revision 1.14  2012/11/09  22:47:29  avi
# $MB (multiband) flag
#
# Revision 1.13  2012/07/31  03:33:03  avi
# correct typo in t1w code
#
# Revision 1.12  2012/02/03  21:51:48  avi
# correct interleave logic
#
# Revision 1.11  2011/07/26  05:55:33  avi
# enable Siemens EPI slice interleaving in frame_align_4dfp
#
# Revision 1.10  2011/07/26  05:34:28  avi
# E4dfp logic
#
# Revision 1.9  2011/05/10  05:04:29  avi
# option epi_zflip
#
# Revision 1.8  2010/09/16  01:04:42  avi
# option cross_day_nostretch
#
# Revision 1.7  2010/09/10  23:33:36  avi
# correct Gad logic
#
# Revision 1.6  2010/09/01  23:04:48  avi
# params file variable Gad
#
# Revision 1.5  2010/05/04  03:57:55  avi
# avoid accessing $mprs if $day1_patid is set
#
# Revision 1.4  2010/04/13  22:14:40  avi
# unpack_4dfp squeeze options
#
# Revision 1.3  2009/07/31  03:06:51  avi
# remove necessity of defining (unused) $scrdir in params file
#
# Revision 1.2  2009/02/23  22:37:12  avi
# include option -h in call to normalize_4dfp (make plottable voxel value histogram)
#
# Revision 1.1  2009/01/16  04:17:49  avi
# Initial revision
#

set idstr = '$Id: generic_cross_bold_pp_090115,v 1.20 2020/10/16 22:25:58 tanenbauma Exp $'
echo $idstr
set program = $0; set program = $program:t
setenv FSLOUTPUTTYPE NIFTI
if (${#argv} < 1) then
	echo "usage:	"$program" param_sfile [instructions_file]"
	exit 1
endif
set prmfile = $1
echo "prmfile="$prmfile

if (! -e $prmfile) then
	echo $program": "$prmfile not found
	exit -1
endif
source $prmfile
if (${#argv} > 1) then
	set instructions = $2
	if (! -e $instructions) then
		echo $program": "$instructions not found
		exit -1
	endif
	cat $instructions
	source $instructions
endif

if ($target:h != $target) then
	set tarstr = -T$target
else
	set tarstr = $target
endif

if ( ! ${?usedcm2niix} ) set usedcm2niix = 0
@ runs = ${#irun}
if ($runs != ${#fstd}) then
	echo "irun fstd mismatch - edit "$prmfile
	exit -1
endif

if (! ${?scrdir}) set scrdir = ""
@ usescr = `echo $scrdir | awk '{print length ($1)}'`
if ($usescr) then 
	if (! -e $scrdir) mkdir $scrdir
	if ($status) exit $status
endif
set sourcedir = $cwd
if (! ${?sorted}) @ sorted = 0

if (! ${?MB}) @ MB = 0			# skip slice timing correction and debanding

set squeezestr = ""
if (${?sx}) then
	set squeezestr = $squeezestr" -sx"$sx
endif
if (${?sy}) then
	set squeezestr = $squeezestr" -sy"$sy
endif

if (! ${?E4dfp}) @ E4dfp = 0
if (${E4dfp}) then
	echo "4dfp files have been pre-generated. Option E4dfp set with value $E4dfp. Skipping dcm_to_4dfp"
endif

date
###################
# process BOLD data
###################
if (${?epi_zflip}) then
	if ($epi_zflip) set zflip = "-z"
else
	set zflip = ""
endif
if (! ${?interleave}) set interleave = ""
if (${?Siemens_interleave}) then
	if ($Siemens_interleave) set interleave = "-N"
endif
if (! ${?MBfac}) @ MBfac = 1

######################################
# check to see if debanding is needed
######################################
if ( ! $MB ) then 
	if ( ${?seqstr} ) then
		set SLT = ( `echo $seqstr | sed 's|,| |g'` ) 
		@ k = 3
		set difftime = `echo $SLT[2] - $SLT[1] | bc -l`
		set dbnd_flag = 1
		if ( $difftime != "-2" && $difftime != "2") set dbnd_flag = 0
		set SWITCH = 0; 
		while ( $dbnd_flag  && $k <= $#SLT )
			@ l = $k - 1
			if ( `echo $SLT[$k] - $SLT[$l] != $difftime | bc -l` && $SWITCH == 1) then
				 set dbnd_flag = 0
			else if ( `echo $SLT[$k] - $SLT[$l] != $difftime | bc -l` ) then 
				set  SWITCH = 1
			endif
			@ k++
		end
	else if ( "$interleave" == "" || "$interleave" == "-N" ) then
		set dbnd_flag = 1
	else if ( "$interleave" == "-S" ) then
		set dbnd_flag = 0
	endif
	if ( ${?seqstr} ) then
		set STR = "-seqstr "$seqstr;
	else
		set STR = ""
	endif 

	if ($dbnd_flag) then
		set MBstr = _faln_dbnd
	else
		set MBstr = _faln
	endif
else 
	set MBstr = ""
endif
@ err = 0
@ k = 1
while ($k <= $runs)
	if (! $E4dfp) then
		if ($usescr) then		# test to see if user requested use of scratch disk
			if (-e bold$irun[$k]) /bin/rm bold$irun[$k]	# remove existing link
			if (! -d $scrdir/bold$irun[$k]) mkdir $scrdir/bold$irun[$k]
			ln -s $scrdir/bold$irun[$k] bold$irun[$k]
		else
			if (! -d bold$irun[$k]) mkdir bold$irun[$k]
		endif
	endif
	pushd bold$irun[$k]
	set y = $patid"_b"$irun[$k]${MBstr}
	if (-e $y.4dfp.img && -e $y.4dfp.ifh) goto POP
	if (! $E4dfp) then
		if ( ! $usedcm2niix ) then
			if ($sorted) then
				echo		dcm_to_4dfp -q -b study$fstd[$k] $inpath/study$fstd[$k]
				if ($go)	dcm_to_4dfp -q -b study$fstd[$k] $inpath/study$fstd[$k]
			else
				echo		dcm_to_4dfp -q -b study$fstd[$k] $inpath/$dcmroot.$fstd[$k]."*"
				if ($go)	dcm_to_4dfp -q -b study$fstd[$k] $inpath/$dcmroot.$fstd[$k].*
			endif
		else
			dcm2niix -o . -f study$fstd[$k] $inpath/study$fstd[$k] || exit 1
			nifti_4dfp -4 study$fstd[$k] $patid"_b"$irun[$k] -N || exit 1
			/bin/rm study$fstd[$k].*
		endif 
	endif
	if (! ${?nounpack} && ! $usedcm2niix) then 
		echo		unpack_4dfp -V study$fstd[$k] $patid"_b"$irun[$k] -nx$nx -ny$ny $squeezestr $zflip
		if ($go)	unpack_4dfp -V study$fstd[$k] $patid"_b"$irun[$k] -nx$nx -ny$ny $squeezestr $zflip
		if ($status) then
			@ err++
			/bin/rm $patid"_b"$irun[$k]*
			goto POP
		endif
		echo		/bin/rm  study$fstd[$k]."*"
		if ($go)	/bin/rm  study$fstd[$k].*
	endif 
	if ($MB) goto POP
	echo		frame_align_4dfp $patid"_b"$irun[$k] $skip -TR_vol $TR_vol -TR_slc $TR_slc -d $epidir $interleave -m $MBfac $STR
	if ($go)	frame_align_4dfp $patid"_b"$irun[$k] $skip -TR_vol $TR_vol -TR_slc $TR_slc -d $epidir $interleave -m $MBfac $STR
	if ( $dbnd_flag ) then 
		echo		deband_4dfp -n$skip $patid"_b"$irun[$k]"_faln"
		if ($go)	deband_4dfp -n$skip $patid"_b"$irun[$k]"_faln"
		if ($status)	exit $status
		if ($economy > 3) then
			echo		/bin/rm $patid"_b"$irun[$k]"_faln".4dfp."*"
			if ($go)	/bin/rm $patid"_b"$irun[$k]"_faln".4dfp.*
		endif
	endif
	if ($economy > 2 && ! $E4dfp ) then
		echo		/bin/rm $patid"_b"$irun[$k].4dfp."*"
		if ($go)	/bin/rm $patid"_b"$irun[$k].4dfp.*
	endif
POP:
	popd	# out of bold$irun[$k]
	@ k++
end
if ($err) then
	echo $program": one or more BOLD runs failed preliminary processing"
	exit -1
endif

if ($epi2atl == 2) goto ATL

if (-e  $patid"_xr3d".lst) /bin/rm $patid"_xr3d".lst; touch $patid"_xr3d".lst
@ k = 1
while ($k <= $runs)
	echo bold$irun[$k]/$patid"_b"$irun[$k]${MBstr} >> $patid"_xr3d".lst
	@ k++
end

echo cat	$patid"_xr3d".lst
cat		$patid"_xr3d".lst
echo		cross_realign3d_4dfp -n$skip -qv$normode -l$patid"_xr3d".lst
if ($go)	cross_realign3d_4dfp -n$skip -qv$normode -l$patid"_xr3d".lst
if ($status)	exit $status

if (! $?BiasField) @ BiasField = 0;
#######################
# bias field correction
#######################
if ($BiasField) then
################################
# create average across all runs
################################
	if (-e ${patid}${MBstr}_xr3d.lst) /bin/rm ${patid}${MBstr}_xr3d.lst
	touch ${patid}${MBstr}_xr3d.lst
	@ k = 1
	while ($k <= $runs)
		echo bold$irun[$k]/$patid"_b"$irun[$k]${MBstr}_xr3d >> ${patid}${MBstr}_xr3d.lst
		@ k++
	end
	conc_4dfp  ${patid}${MBstr}_xr3d -l${patid}${MBstr}_xr3d.lst
	set  format = `conc2format ${patid}${MBstr}_xr3d.conc $skip`	
	actmapf_4dfp $format ${patid}${MBstr}_xr3d.conc -aavg
	if ($status) exit $status
	set base = ${patid}${MBstr}_xr3d_avg
	nifti_4dfp -n ${base} ${base}
	if ($status) exit $status
	$FSLDIR/bin/bet ${base} ${base}_brain -f 0.3
	if ($status) exit $status
######################################
# compute bias field within brain mask
######################################
	$FSLDIR/bin/fast -t 2 -n 3 -H 0.1 -I 4 -l 20.0 --nopve -B -o ${base}_brain ${base}_brain
	if ($status) exit $status
	nifti_4dfp -4 ${base}_brain_restore ${base}_brain_restore
	if ($status) exit $status
#####################################
# extend bias field throughout volume
#####################################
	extend_fast_4dfp -G ${base} ${base}_brain_restore ${base}_BF
	if ($status) exit $status
	nifti_4dfp -n ${base}_BF ${base}_BF
	if ($status) exit $status
#############################
# bias field correct all runs
#############################
	@ k = 1
	while ($k <= $runs)
		pushd bold$irun[$k]
		imgopr_4dfp -p$patid"_b"$irun[$k]${MBstr}_xr3d_BC $patid"_b"$irun[$k]${MBstr}_xr3d ../${base}_BF 
		if ($status) exit $status
		/bin/rm -r    $patid"_b"$irun[$k]${MBstr}_xr3d.4dfp* 
		popd
		@ k++	
	end
	if ($status) exit $status
	set BC = "_BC"
else 
	set BC = ""
endif  

date
#################################
# compute mode 1000 normalization
#################################
@ k = 1
while ($k <= $runs)
	pushd bold$irun[$k]
	if ($BiasField) then 
		set format = `cat $patid"_b"$irun[$k]${MBstr}_xr3d_BC.4dfp.ifh | \
			gawk 'BEGIN{skip = 1} {if  (/\[4\]/) {f = $NF}} END{printf("%dx%d+",skip,f-skip)}' skip=$skip`
		actmapf_4dfp $format $patid"_b"$irun[$k]${MBstr}_xr3d_BC -aavg 
		if ($status) exit $status		
		echo 		normalize_4dfp $patid"_b"$irun[$k]${MBstr}_xr3d_BC_avg -h
		if ($go)	normalize_4dfp $patid"_b"$irun[$k]${MBstr}_xr3d_BC_avg -h
		if ($status) exit $status	
		if ($economy > 4 && $epi2atl == 0) /bin/rm $patid"_b"$irun[$k]${MBstr}_xr3d_BC_avg.4dfp."*"
	else 
		echo 		normalize_4dfp $patid"_b"$irun[$k]${MBstr}"_r3d_avg" -h	
		if ($go)	normalize_4dfp $patid"_b"$irun[$k]${MBstr}"_r3d_avg" -h
		if ($status) exit $status	
		if ($economy > 4 && $epi2atl == 0) /bin/rm $patid"_b"$irun[$k]${MBstr}"_r3d_avg".4dfp."*"
	endif
	popd	# out of bold$irun[$k]
	@ k++
end

date
###############################
# apply mode 1000 normalization
###############################
if (-e  $patid"_anat".lst) /bin/rm $patid"_anat".lst; touch $patid"_anat".lst
@ k = 1
while ($k <= $runs)
	pushd bold$irun[$k]
	if ($BiasField) then
		set file = $patid"_b"$irun[$k]${MBstr}_xr3d_BC_avg_norm.4dfp.img.rec
	else 
		set file = $patid"_b"$irun[$k]${MBstr}_r3d_avg_norm.4dfp.img.rec
	endif
	set f = 1.0; if (-e $file) set f = `head $file | awk '/original/{print 1000/$NF}'`
	echo		scale_4dfp $patid"_b"$irun[$k]${MBstr}_xr3d${BC} $f -anorm
	if ($go)	scale_4dfp $patid"_b"$irun[$k]${MBstr}_xr3d${BC} $f -anorm
	echo		/bin/rm $patid"_b"$irun[$k]${MBstr}_xr3d${BC}.4dfp."*"
	if ($go)	/bin/rm $patid"_b"$irun[$k]${MBstr}_xr3d${BC}.4dfp.*
	popd	# out of bold$irun[$k]
	echo bold$irun[$k]/$patid"_b"$irun[$k]${MBstr}_xr3d${BC}_norm >> $patid"_anat".lst
	@ k++
end

date
###################
# movement analysis
###################
if (! -d movement) mkdir movement
@ k = 1
while ($k <= $runs)
	echo		mat2dat bold$irun[$k]/"*_xr3d".mat -RD -n$skip
	if ($go)	mat2dat bold$irun[$k]/*"_xr3d".mat -RD -n$skip
	echo		/bin/mv bold$irun[$k]/"*_xr3d.*dat"	movement
	if ($go)	/bin/mv bold$irun[$k]/*"_xr3d".*dat	movement
	@ k++
end

date
######################################
# make EPI first frame (anatomy) image
######################################
echo cat	$patid"_anat".lst
cat		$patid"_anat".lst
echo		paste_4dfp -p1 $patid"_anat".lst	$patid"_anat_ave"
if ($go)	paste_4dfp -p1 $patid"_anat".lst	$patid"_anat_ave"
echo		ifh2hdr	-r2000				$patid"_anat_ave"
if ($go)	ifh2hdr	-r2000				$patid"_anat_ave"

######################
# atlas transformation
######################
if (! -d atlas) mkdir atlas
if ($BiasField) then
	if ($go)	/bin/mv ${base}_brain.* ${base}_brain_restore.* ${base}_BF.4dfp.* atlas/
endif
echo		mv $patid"_anat*" atlas
if ($go)	mv $patid"_anat"* atlas

pushd atlas
######################
# make MP-RAGE average
######################
if (! ${?day1_patid}) set day1_patid = "";
if ($day1_patid != "") then
	set stretch_flag = ""
	if (! ${?cross_day_nostretch}) @ cross_day_nostretch = 0;
	if ($cross_day_nostretch) set stretch_flag = -nostretch
	echo		cross_day_imgreg_4dfp $patid $day1_path $day1_patid $tarstr $stretch_flag
	if ($go)	cross_day_imgreg_4dfp $patid $day1_path $day1_patid $tarstr $stretch_flag
	if ($status) exit $status
	goto EPI_to_ATL
endif

@ nmpr = ${#mprs}
if ($nmpr < 1) exit 0
set mprave = $patid"_mpr_n"$nmpr
set mprlst = ()
@ k = 1
while ($k <= $nmpr)
	if (! $E4dfp) then
		if ( ! $usedcm2niix ) then 
			if ($sorted) then
				echo		dcm_to_4dfp -b $patid"_mpr"$k $inpath/study$mprs[$k]
				if ($go)	dcm_to_4dfp -b $patid"_mpr"$k $inpath/study$mprs[$k]
			else
				echo		dcm_to_4dfp -b $patid"_mpr"$k $inpath/$dcmroot.$mprs[$k]."*"
				if ($go)	dcm_to_4dfp -b $patid"_mpr"$k $inpath/$dcmroot.$mprs[$k].*
			endif
			if ($status) exit $status
		else
			dcm2niix -o . -w 1 -f $patid"_mpr"$k $inpath/study$mprs[$k] || exit 1
			nifti_4dfp -4 $patid"_mpr"$k $patid"_mpr"$k -N || exit 1
			rm $patid"_mpr"$k.nii 
		endif 
	endif
	set mprlst = ($mprlst $patid"_mpr"$k)
	@ k++
end

date
#########################
# compute atlas transform
#########################
if (! ${?tse})	set tse = ()
if (! ${?t1w})	set t1w = ()
if (! ${?pdt2})	set pdt2 = ()
if (! ${?Gad})	set Gad = 0;		# Gadolinium contrast given: @ Gad = 1
if ($Gad) then
	mpr2atl1_4dfp $mprlst[1] $tarstr useold
	if ($status) exit $status
	set episcript = epi2t2w2mpr2atl3_4dfp;
else
	echo		avgmpr_4dfp $mprlst $mprave $tarstr useold
	if ($go)	avgmpr_4dfp $mprlst $mprave $tarstr useold
	if ($status) exit $status
	set episcript = epi2t2w2mpr2atl2_4dfp;
endif

@ ntse = ${#tse}
if ($ntse) then
	set tselst = ()
	@ k = 1
	while ($k <= $ntse)
		set filenam = $patid"_t2w"
		if ($ntse > 1) set filenam = $filenam$k
		if (! $E4dfp) then
			if ( ! $usedcm2niix ) then 
				if ($sorted) then
					echo		dcm_to_4dfp -b $filenam $inpath/study$tse[$k]
					if ($go)	dcm_to_4dfp -b $filenam $inpath/study$tse[$k]
				else
					echo		dcm_to_4dfp -b $filenam $inpath/$dcmroot.$tse[$k]."*"
					if ($go) 	dcm_to_4dfp -b $filenam $inpath/$dcmroot.$tse[$k].*
				endif
				if ($status) exit $status
			else 
				dcm2niix -o . -w 1 -f $filenam $inpath/study$tse[$k] || exit 1
				nifti_4dfp -4 $filenam $filenam -N || exit 1
				rm $filenam.nii
			endif
		endif
		set tselst = ($tselst $filenam)
		@ k++
	end
	if ($ntse  > 1) then
		echo		collate_slice_4dfp $tselst $patid"_t2w"
		if ($go)	collate_slice_4dfp $tselst $patid"_t2w"
	endif
	echo		$episcript $patid"_anat_ave" $patid"_t2w" $patid"_mpr1" useold $tarstr
	if ($go)	$episcript $patid"_anat_ave" $patid"_t2w" $patid"_mpr1" useold $tarstr
###########################################################
# make atlas transformed t2w in 111 222 and 333 atlas space
###########################################################
	set t4file = $patid"_t2w_to_"$target:t"_t4"
	foreach O (111 222 333)
		echo		t4img_4dfp $t4file  ${patid}_t2w	${patid}_t2w_on_${target:t}_$O -O$O
		if ($go)	t4img_4dfp $t4file  ${patid}_t2w	${patid}_t2w_on_${target:t}_$O -O$O
		if ($status) exit $status
		echo		ifh2hdr	 -r1000				${patid}_t2w_on_${target:t}_$O
		if ($go)	ifh2hdr	 -r1000				${patid}_t2w_on_${target:t}_$O
	end
else if (${#t1w}) then
	if (! $E4dfp) then
		if ( ! $usedcm2niix ) then
			if ($sorted) then
				echo		dcm_to_4dfp -b $patid"_t1w" $inpath/study$t1w
				if ($go)	dcm_to_4dfp -b $patid"_t1w" $inpath/study$t1w
			else
				echo		dcm_to_4dfp -b $patid"_t1w" $inpath/$dcmroot.$t1w."*"
				if ($go) 	dcm_to_4dfp -b $patid"_t1w" $inpath/$dcmroot.$t1w.*
			endif
		else
			dcm2niix -o . -w 1 -f $patid"_t1w" $inpath/study$t1w || exit 1
			nifti_4dfp -4 $patid"_t1w" $patid"_t1w" -N || exit 1
			rm $patid"_t1w".nii
		endif
	endif
	echo		t2w2mpr_4dfp $patid"_mpr1" $patid"_t1w" $tarstr
	if ($go)	t2w2mpr_4dfp $patid"_mpr1" $patid"_t1w" $tarstr
	if ($status) exit $status

	echo		epi2t1w_4dfp $patid"_anat_ave" $patid"_t1w" $tarstr
	if ($go)	epi2t1w_4dfp $patid"_anat_ave" $patid"_t1w" $tarstr
	if ($status) exit $status

	echo		t4_mul $patid"_anat_ave_to_"$patid"_t1w_t4" $patid"_t1w_to_"$target:t"_t4"
	if ($go)	t4_mul $patid"_anat_ave_to_"$patid"_t1w_t4" $patid"_t1w_to_"$target:t"_t4"
else if (${#pdt2}) then
	if (! $E4dfp) then
		if ( ! $usedcm2niix ) then 
			if ($sorted) then
				echo		dcm_to_4dfp -b $patid"_pdt2" $inpath/study$pdt2
				if ($go)	dcm_to_4dfp -b $patid"_pdt2" $inpath/study$pdt2
			else
				echo		dcm_to_4dfp -b $patid"_pdt2" $inpath/$dcmroot.$pdt2."*"
				if ($go) 	dcm_to_4dfp -b $patid"_pdt2" $inpath/$dcmroot.$pdt2.*
			endif
			if ($status) exit $status
		else
			dcm2niix -o . -w 1 -f $patid"_pdt2" $inpath/study$pdt2 || exit 1
			nifti_4dfp -4 $patid"_pdt2" $patid"_pdt2" -N || exit 1
			rm $patid"_pdt2".nii
		endif
	endif
	echo		extract_frame_4dfp $patid"_pdt2" 2 -o$patid"_t2w"
	if ($go)	extract_frame_4dfp $patid"_pdt2" 2 -o$patid"_t2w"
	if ($status) exit $status

	echo		$episcript $patid"_anat_ave" $patid"_t2w" $patid"_mpr1" useold $tarstr
	if ($go)	$episcript $patid"_anat_ave" $patid"_t2w" $patid"_mpr1" useold $tarstr
else
	echo		epi2mpr2atl2_4dfp $patid"_anat_ave" $patid"_mpr1" useold $tarstr
	if ($go)	epi2mpr2atl2_4dfp $patid"_anat_ave" $patid"_mpr1" useold $tarstr
endif
if ($status) exit $status

EPI_to_ATL:
####################################################################
# make atlas transformed EPI anat_ave in 111 222 and 333 atlas space
####################################################################
set t4file = $patid"_anat_ave_to_"$target:t"_t4"
foreach O (111 222 333)
	echo		t4img_4dfp $t4file  $patid"_anat_ave"	$patid"_anat_ave_t88_"$O -O$O
	if ($go)	t4img_4dfp $t4file  $patid"_anat_ave"	$patid"_anat_ave_t88_"$O -O$O
	
	if ($status) exit $status
	echo		ifh2hdr	 -r2000				$patid"_anat_ave_t88_"$O
	if ($go)	ifh2hdr	 -r2000				$patid"_anat_ave_t88_"$O
end
if ( $BiasField  && $go ) then 
	t4img_4dfp $t4file ${base}_BF ${base}_BF_t88_333 -O333
endif
/bin/rm *t4% >& /dev/null
popd		# out of atlas

if (! $epi2atl) exit 0
ATL:
date
###################################################################
# make cross-realigned atlas-transformed resampled BOLD 4dfp stacks
###################################################################
@ k = 1
while ($k <= $runs)
	pushd bold$irun[$k]
	
	if ( $BiasField ) then
		set file = $patid"_b"$irun[$k]${MBstr}_xr3d_BC_avg_norm.4dfp.img.rec
		set f = 1.0; if (-e $file) set f = `head $file | awk '/original/{print 1000/$NF}'`
		echo		t4_xr3d_4dfp $sourcedir/atlas/$patid"_anat_ave_to_"$target:t"_t4" $patid"_b"$irun[$k]${MBstr} -atmp -v$normode -c$f -O333
		if ($go)	t4_xr3d_4dfp $sourcedir/atlas/$patid"_anat_ave_to_"$target:t"_t4" $patid"_b"$irun[$k]${MBstr} -atmp -v$normode -c$f -O333 || exit $status
		if ($go)	imgopr_4dfp -r$patid"_b"$irun[$k]${MBstr}_xr3d_atl $patid"_b"$irun[$k]${MBstr}_tmp $sourcedir/atlas/${base}_BF_t88_333 || exit $status
		if ($go)	rm $patid"_b"$irun[$k]${MBstr}_tmp.4dfp.*
	else
		set file = $patid"_b"$irun[$k]${MBstr}"_r3d_avg_norm".4dfp.img.rec
		set f = 1.0; if (-e $file) set f = `head $file | awk '/original/{print 1000/$NF}'`
		echo		t4_xr3d_4dfp $sourcedir/atlas/$patid"_anat_ave_to_"$target:t"_t4" $patid"_b"$irun[$k]${MBstr} -axr3d_atl -v$normode -c$f -O333
		if ($go)	t4_xr3d_4dfp $sourcedir/atlas/$patid"_anat_ave_to_"$target:t"_t4" $patid"_b"$irun[$k]${MBstr} -axr3d_atl -v$normode -c$f -O333
		if ($status) exit $status
	endif 
	if ($economy > 6) then
		echo		/bin/rm $patid"_b"$irun[$k]${MBstr}"_xr3d${BC}_norm".4dfp."*"
		if ($go)	/bin/rm $patid"_b"$irun[$k]${MBstr}"_xr3d${BC}_norm".4dfp.*
	endif
	popd	# out of bold$irun[$k]
	@ k++
end
echo "done status="$status
exit
