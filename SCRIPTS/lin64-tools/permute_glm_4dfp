#!/bin/csh -f

#$Header: /data/petsun4/data1/solaris/csh_scripts/RCS/permute_glm_4dfp,v 1.8 2018/08/17 05:51:33 avi Exp $
#$Log: permute_glm_4dfp,v $
# Revision 1.8  2018/08/17  05:51:33  avi
# invoke with -f
#
# Revision 1.7  2015/02/02  19:13:19  larsc
# Added conc handling.
#
#Revision 1.6  2013/01/23 16:18:21  larsc
#Adds dthresh to command line parser and echoes it to the log file.
#
# Revision 1.5  2013/01/18  20:10:15  larsc
# Adopted read_bootstrap_log.awk and criteria2dat.csh standards. Removed size and probability list options, changed value threshold option to Matlab style.
#
# Revision 1.4  2012/11/29  16:21:20  larsc
# Added ability to recognize output from gawk rand() equal to 1.*.
#
# Revision 1.3  2012/11/21  17:58:43  larsc
# Fixed formatting error with gawk rand(), which occasionally produces numbers in exponential notation. Forced fixed-point notation.
#
# Revision 1.2  2012/11/20  19:53:36  larsc
# File clean up
#
# Revision 1.1  2012/11/20  19:11:42  larsc
# Initial revision
#

set idstr   = '$Id: permute_glm_4dfp,v 1.8 2018/08/17 05:51:33 avi Exp $'
echo $idstr
set program = $0
set program = $program:t

@   NITER   = 1000
set GLM_OPT = ()

set THRESH_LST = ()
set DTHRESH    = 0.1

@ i = 1
@ j = 0
while ($i <= ${#argv})
	switch ($argv[$i])
	case -N*:
		@   NITER   = `echo $argv[$i] | gawk '{print substr ($1, 3)}'`
		breaksw
	case -M*:
		set MSKROOT = `echo $argv[$i] | gawk '{sub (/(\.4dfp(\.img(\.rec)?|\.ifh|\.hdr)?)?$/, ""); print substr ($1, 3)}'`
		breaksw
	case -T*:
		set THRESH_LST = `echo $argv[$i] | gawk '{gsub (":", " "); print substr ($0, 3)}' | gawk 'NF==3 {for (i = $1; i <= $3; i = i+$2) print i} NF==2 {for (i = $1; i <= $2; i = i+'$DTHRESH') print i} NF==1 {print $1}'`
		set DTHRESH    = `echo $argv[$i] | gawk '{gsub (":", " "); print substr ($0, 3)}' | gawk '{if (NF==3) print $2; else print "'$DTHRESH'"}'`
		breaksw
	case -*:
		set GLM_OPT = ($GLM_OPT $argv[$i])
		switch ($argv[$i])
		case -o*:
			set GLMSTR = `echo $argv[$i] | gawk '{if (length ($1) == 2) print "coeff"; else print substr ($1, 3)}'`
			breaksw
		case -b*:
			set GLMSTR = `echo $argv[$i] | gawk '{if (length ($1) == 2) print "tbeta"; else print substr ($1, 3)}'`
			breaksw
		case -p*:
			set GLMSTR = `echo $argv[$i] | gawk '{if (length ($1) == 2) print "pcorr"; else print substr ($1, 3)}'`
			breaksw
		case -t*:
			set GLMSTR = `echo $argv[$i] | gawk '{if (length ($1) == 2) print "tcorr"; else print substr ($1, 3)}'`
			breaksw
		case -r*:
			set GLMSTR = `echo $argv[$i] | gawk '{if (length ($1) == 2) print "resid"; else print substr ($1, 3)}'`
			breaksw
		endsw
		breaksw
	default:
		switch ($j)
		case 0:
			@ j ++
			set FORMAT  = $argv[$i]
			breaksw
		case 1:
			@ j ++
			set PROFILE = $argv[$i]
			breaksw
		case 2:
			@ j ++
			set IMGROOT = `echo $argv[$i] | gawk '{sub (/((\.4dfp(\.img(\.rec)?|\.ifh|\.hdr)?)?|(\.conc(\.rec)?))$/, ""); print $0}'`
			set CONCEXT = `echo $argv[$i] | gawk '{if ($0~/\.conc(\.rec)?$/) print ".conc"; else print ""}'`
			breaksw
		case 3:
			@ j ++
			set OUTROOT = `echo $argv[$i] | gawk '{sub (/(\.4dfp(\.img(\.rec)?|\.ifh|\.hdr)?)?$/, ""); print $0}'`
			breaksw
		endsw
		breaksw
        endsw
        @ i ++
end
if ($j != 4) then
	echo "Usage:	$program <format> <profile> <4dfp|conc input> <outroot>"
	echo " -N<int>		number of permutations (default $NITER)"
	echo " -M<(4dfp)mask>	apply mask before clustering"
	echo " -T<float>[:<float>[:<float>]]	Matlab-style list of value thresholds. Default step = "$DTHRESH
	echo "N.B. Other options will be passed to glm_4dfp"
	echo "N.B. <profile> must tolerate line by line permutation"
	exit 1
endif

foreach file ($PROFILE)
	if (! -e $file) then
		echo $program": "$file" not found"
		exit -1
	endif
end
if (! $?GLMSTR) then
	echo $program": glm_4dfp option to save an image needed"
	exit -1
endif
set GLMROOT = $IMGROOT"_"$GLMSTR
if ($?MSKROOT) then
	set CLUSROOT = $GLMROOT"_msk"
else
	set CLUSROOT = $GLMROOT
endif

echo "dthresh= "$DTHRESH >! $OUTROOT.log

@ i = 0
while ($i < $NITER)
	@ i ++
	echo "Iteration "$i
	echo iter $i		>> $OUTROOT.log

	gawk 'BEGIN {srand ()} {printf ("%f: %s\n", rand(), $0)}' $PROFILE | sort -n | gawk '{sub (/^[01]*\.[0-9]*: /, ""); print $0}' >! $OUTROOT.profile.txt
	glm_4dfp $FORMAT $OUTROOT.profile.txt $IMGROOT$CONCEXT $GLM_OPT >! $OUTROOT.junk;	if ($status) exit $status

	if ($?MSKROOT == 1) then
		maskimg_4dfp -R -1 $GLMROOT $MSKROOT $CLUSROOT  >! $OUTROOT.junk;	if ($status) exit $status
	endif

	foreach thresh ($THRESH_LST)
		echo "Threshold "$thresh
		echo "thresh= "$thresh			>> $OUTROOT.log
		cluster_4dfp -At$thresh $CLUSROOT	>> $OUTROOT.log;	if ($status) exit $status
	end

	rm $GLMROOT.4dfp.{img,ifh,hdr,img.rec}
	if ($?MSKROOT == 1) then
		rm $CLUSROOT.4dfp.{img,ifh,hdr}
	endif
	rm $OUTROOT.profile.txt $OUTROOT.junk
end

gawk -f $RELEASE/read_bootstrap_log.awk $OUTROOT.log >!	$OUTROOT.criteria
criteria2dat.csh					$OUTROOT.criteria

exit 0
