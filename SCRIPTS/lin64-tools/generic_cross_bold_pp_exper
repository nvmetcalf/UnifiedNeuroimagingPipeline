#!/bin/csh
#$Header: /data/petsun4/data1/solaris/csh_scripts/RCS/generic_cross_bold_pp_exper,v 1.1 2010/08/17 22:10:20 coalsont Exp $
#$Log: generic_cross_bold_pp_exper,v $
# Revision 1.1  2010/08/17  22:10:20  coalsont
# Initial revision
#
#set echo
set input_to_4dfp = /home/usr/coalsont/generic_pp/input_to_4dfp
set idstr = '$Id: generic_cross_bold_pp_exper,v 1.1 2010/08/17 22:10:20 coalsont Exp $'
echo $idstr
set program = $0; set program = $program:t
set CURRDIR = `pwd`
if ($?cwd == 0) set cwd = ""
if ($cwd == "") set cwd = `pwd`
if ($?scrdir == 0) set scrdir = ""
if (${#argv} < 1) then
	echo "usage:	"$program" param_sfile [instructions_file]"
	exit 1
endif
set prmfile = $1
echo "prmfile="$prmfile

if (! -e $prmfile) then
	echo $program": "$prmfile not found
	exit -1
endif
source $prmfile
if (${#argv} > 1) then
	set instructions = $2
	if (! -e $instructions) then
		echo $program": "$instructions not found
		exit -1
	endif
	cat $instructions
	source $instructions
endif
@ usescr = `echo $scrdir | awk '{print length ($1)}'`
if ($usescr) then 
	if (! -e $scrdir) mkdir $scrdir
	if ($status) exit $status
endif
set sourcedir = $cwd

#legacy support starts here

if (! ${?tse})	set tse = ()
if (! ${?t1w})	set t1w = ()
if (! ${?pdt2})	set pdt2 = ()
if ($target:h != $target) then
	set tarstr = -T$target
else
	set tarstr = $target
endif

if (! ${?sorted}) @ sorted = 0
@ runs = ${#irun}
if (! $?name_list) then
	@ j = 1
	@ nmpr = ${#mprs}
	if ($runs != ${#fstd}) then
		echo "irun fstd mismatch - edit "$prmfile
		exit -1
	endif
	set name_list = ()
	set format_list = ()
	set sorted_list = ()
	#set mosaic_list = ()
	set bold_list = ()
	set mpr_list = ()
	set tse_list = ()
	set t1w_list = ()
	set pdt2_list = ()
	@ k = 1
	while ($k <= $runs)
		if ($sorted) then
			set name_list = ($name_list $inpath/study$fstd[$k])
		else
			set name_list = ($name_list $inpath/$dcmroot.$fstd[$k].)
		endif
		set format_list = ($format_list DICOM)
		set sorted_list = ($sorted_list $sorted)
		#set mosaic_list = ($mosaic_list 1)
		set bold_list = ($bold_list $j)
		@ j++
		@ k++
	end
	@ k = 1
	while ($k <= $nmpr)
		if ($sorted) then
			set name_list = ($name_list $inpath/study$mprs[$k])
		else
			set name_list = ($name_list $inpath/$dcmroot.$mprs[$k].)
		endif
		set format_list = ($format_list DICOM)
		set sorted_list = ($sorted_list $sorted)
		#set mosaic_list = ($mosaic_list 0)
		set mpr_list = ($mpr_list $j)
		@ j++
		@ k++
	end
	@ k = 1
	while ($k <= $#tse)
		if ($sorted) then
			set name_list = ($name_list $inpath/study$tse[$k])
		else
			set name_list = ($name_list $inpath/$dcmroot.$tse[$k].)
		endif
		set format_list = ($format_list DICOM)
		set sorted_list = ($sorted_list $sorted)
		#set mosaic_list = ($mosaic_list 0)
		set tse_list = ($tse_list $j)
		@ j++
		@ k++
	end
	@ k = 1
	while ($k <= $#t1w)
		if ($sorted) then
			set name_list = ($name_list $inpath/study$t1w[$k])
		else
			set name_list = ($name_list $inpath/$dcmroot.$t1w[$k].)
		endif
		set format_list = ($format_list DICOM)
		set sorted_list = ($sorted_list $sorted)
		#set mosaic_list = ($mosaic_list 0)
		set t1w_list = ($t1w_list $j)
		@ j++
		@ k++
	end
	@ k = 1
	while ($k <= $#pdt2)
		if ($sorted) then
			set name_list = ($name_list $inpath/study$pdt2[$k])
		else
			set name_list = ($name_list $inpath/$dcmroot.$pdt2[$k].)
		endif
		set format_list = ($format_list DICOM)
		set sorted_list = ($sorted_list $sorted)
		#set mosaic_list = ($mosaic_list 0)
		set pdt2_list = ($pdt2_list $j)
		@ j++
		@ k++
	end
endif

#end legacy support code

echo name_list: $name_list
echo bold_list: $bold_list
echo mpr_list: $mpr_list
echo tse_list: $tse_list
echo t1w_list: $t1w_list
echo pdt2_list: $pdt2_list
date
###################
# process BOLD data
###################
@ err = 0
@ k = 1
#echo $#bold_list
while ($k <= $#bold_list)
	if ($usescr) then		# test to see if user requested use of scratch disk
		if (-e bold$irun[$k]) /bin/rm bold$irun[$k]	# remove existing link
		if (! -d $scrdir/bold$irun[$k]) mkdir $scrdir/bold$irun[$k]
		ln -s $scrdir/bold$irun[$k] bold$irun[$k]
	else
		if (! -d bold$irun[$k]) mkdir bold$irun[$k]
	endif
	pushd bold$irun[$k]
	set y = $patid"_b"$irun[$k]"_faln_dbnd"
	if (-e $y.4dfp.img && -e $y.4dfp.ifh) goto POP
#	if ($sorted) then
#		echo		dcm_to_4dfp -q -b study$fstd[$k] $inpath/study$fstd[$k]
#		if ($go)	dcm_to_4dfp -q -b study$fstd[$k] $inpath/study$fstd[$k]
#	else
#		echo		dcm_to_4dfp -q -b study$fstd[$k] $inpath/$dcmroot.$fstd[$k]."*"
#		if ($go)	dcm_to_4dfp -q -b study$fstd[$k] $inpath/$dcmroot.$fstd[$k].*
#	endif
#	echo		unpack_4dfp -V study$fstd[$k] $patid"_b"$irun[$k] -nx$nx -ny$ny
#	if ($go)	unpack_4dfp -V study$fstd[$k] $patid"_b"$irun[$k] -nx$nx -ny$ny

#begin new input code
#IMPORTANT: replace outname's value!!!

	set outname = $patid"_b"$irun[$k]
	set inname = $name_list[$bold_list[$k]]
	set dataformat = $format_list[$bold_list[$k]]
	set sorted = $sorted_list[$bold_list[$k]]
	$input_to_4dfp $outname $inname $dataformat $sorted $go
	
#end new input code
	
#	set mosaic = $mosaic_list[$bold_list[$k]]
#	if ($mosaic) then
#		$input_to_4dfp $outname $inname $dataformat $sorted $mosaic $go $nx $ny -q
#	else
#	endif
	if ($status) then
		@ err++
		/bin/rm $patid"_b"$irun[$k]*
		goto POP
	endif
#	echo		/bin/rm  study$fstd[$k]."*"
#	if ($go)	/bin/rm  study$fstd[$k].*

	echo		frame_align_4dfp $patid"_b"$irun[$k] $skip -TR_vol $TR_vol -TR_slc $TR_slc -d $epidir
	if ($go)	frame_align_4dfp $patid"_b"$irun[$k] $skip -TR_vol $TR_vol -TR_slc $TR_slc -d $epidir

	echo		deband_4dfp -n$skip $patid"_b"$irun[$k]"_faln"
	if ($go)	deband_4dfp -n$skip $patid"_b"$irun[$k]"_faln"
	if ($status)	exit $status

	if ($economy > 2) then
		echo		/bin/rm $patid"_b"$irun[$k].4dfp."*"
		if ($go)	/bin/rm $patid"_b"$irun[$k].4dfp.*
	endif
	if ($economy > 3) then
		echo		/bin/rm $patid"_b"$irun[$k]"_faln".4dfp."*"
		if ($go)	/bin/rm $patid"_b"$irun[$k]"_faln".4dfp.*
	endif
POP:
	popd	# out of bold$irun[$k]
	@ k++
end
if ($err) then
	echo $program": one or more BOLD runs failed preliminary processing"
	exit -1
endif
if ($epi2atl == 2) goto ATL

if (-e  $patid"_xr3d".lst) /bin/rm $patid"_xr3d".lst; touch $patid"_xr3d".lst
if (-e  $patid"_anat".lst) /bin/rm $patid"_anat".lst; touch $patid"_anat".lst
@ k = 1
while ($k <= $runs)
	echo bold$irun[$k]/$patid"_b"$irun[$k]"_faln_dbnd" >>			$patid"_xr3d".lst
	echo bold$irun[$k]/$patid"_b"$irun[$k]"_faln_dbnd_xr3d_norm" 1 >>	$patid"_anat".lst
	@ k++
end

echo cat	$patid"_xr3d".lst
cat		$patid"_xr3d".lst
echo		cross_realign3d_4dfp -n$skip -qv$normode -l$patid"_xr3d".lst
if ($go)	cross_realign3d_4dfp -n$skip -qv$normode -l$patid"_xr3d".lst
if ($status)	exit $status

date
#################################
# compute mode 1000 normalization
#################################
@ k = 1
while ($k <= $#bold_list)
	pushd bold$irun[$k]
	echo 		normalize_4dfp $patid"_b"$irun[$k]"_faln_dbnd_r3d_avg" -h
	if ($go)	normalize_4dfp $patid"_b"$irun[$k]"_faln_dbnd_r3d_avg" -h
	if ($economy > 4 && $epi2atl == 0) then
		echo		/bin/rm $patid"_b"$irun[$k]"_faln_dbnd".4dfp."*"
		if ($go)	/bin/rm $patid"_b"$irun[$k]"_faln_dbnd".4dfp.*
	endif
	popd	# out of bold$irun[$k]
	@ k++
end

date
###############################
# apply mode 1000 normalization
###############################
@ k = 1
while ($k <= $#bold_list)
	pushd bold$irun[$k]
	set file = $patid"_b"$irun[$k]"_faln_dbnd_r3d_avg_norm".4dfp.img.rec
	set f = 1.0; if (-e $file) set f = `head $file | awk '/original/{print 1000/$NF}'`
	echo		scale_4dfp $patid"_b"$irun[$k]"_faln_dbnd_xr3d" $f -anorm
	if ($go)	scale_4dfp $patid"_b"$irun[$k]"_faln_dbnd_xr3d" $f -anorm
	echo		/bin/rm $patid"_b"$irun[$k]"_faln_dbnd_xr3d".4dfp."*"
	if ($go)	/bin/rm $patid"_b"$irun[$k]"_faln_dbnd_xr3d".4dfp.*
	popd	# out of bold$irun[$k]
	@ k++
end

date
###################
# movement analysis
###################
if (! -d movement) mkdir movement
@ k = 1
while ($k <= $#bold_list)
	echo		mat2dat bold$irun[$k]/"*_xr3d".mat -RD -n$skip
	if ($go)	mat2dat bold$irun[$k]/*"_xr3d".mat -RD -n$skip
	echo		/bin/mv bold$irun[$k]/"*_xr3d.*dat"	movement
	if ($go)	/bin/mv bold$irun[$k]/*"_xr3d".*dat	movement
	@ k++
end

date
######################################
# make EPI first frame (anatomy) image
######################################
echo cat	$patid"_anat".lst
cat		$patid"_anat".lst
echo		paste_4dfp -p1 $patid"_anat".lst	$patid"_anat_ave"
if ($go)	paste_4dfp -p1 $patid"_anat".lst	$patid"_anat_ave"
echo		ifh2hdr	-r2000				$patid"_anat_ave"
if ($go)	ifh2hdr	-r2000				$patid"_anat_ave"

######################
# atlas transformation
######################
if (! -d atlas) mkdir atlas
echo		mv $patid"_anat*" atlas
if ($go)	mv $patid"_anat"* atlas

pushd atlas
######################
# make MP-RAGE average
######################
if (! ${?day1_patid}) set day1_patid = "";
if ($day1_patid != "") then
	echo		cross_day_imgreg_4dfp $patid $day1_path $day1_patid $tarstr
	if ($go)	cross_day_imgreg_4dfp $patid $day1_path $day1_patid $tarstr
	if ($status) exit $status
	goto EPI_to_ATL
endif

@ nmprs = $#mpr_list
if ($nmprs < 1) exit 0
set mprave = $patid"_mpr_n"$nmprs
set mprlst = ()
@ k = 1
while ($k <= $#mpr_list)
#	if ($sorted) then
#		echo		dcm_to_4dfp -b $patid"_mpr"$k $inpath/study$mprs[$k]
#		if ($go)	dcm_to_4dfp -b $patid"_mpr"$k $inpath/study$mprs[$k]
#	else
#		echo		dcm_to_4dfp -b $patid"_mpr"$k $inpath/$dcmroot.$mprs[$k]."*"
#		if ($go)	dcm_to_4dfp -b $patid"_mpr"$k $inpath/$dcmroot.$mprs[$k].*
#	endif
	set outname = $patid"_mpr"$k
	set inname = $name_list[$mpr_list[$k]]
	set dataformat = $format_list[$mpr_list[$k]]
	set sorted = $sorted_list[$mpr_list[$k]]
#	set mosaic = $mosaic_list[$mpr_list[$k]]
#	if ($mosaic) then
#		$input_to_4dfp $outname $inname $dataformat $sorted $mosaic $go $nx $ny -q
#	else
	$input_to_4dfp $outname $inname $dataformat $sorted $go
#	endif
	if ($status) exit $status
	set mprlst = ($mprlst $patid"_mpr"$k)
	@ k++
end
echo		avgmpr_4dfp $mprlst $mprave $tarstr useold 
if ($go)	avgmpr_4dfp $mprlst $mprave $tarstr useold
if ($status) exit $status

date
#########################
# compute atlas transform
#########################
@ ntse = ${#tse_list}
if ($ntse) then
	set tselst = ()
	@ k = 1
	while ($k <= $ntse)
		set filenam = $patid"_t2w"
		if ($ntse > 1) set filenam = $filenam$k
#		if ($sorted) then
#			echo		dcm_to_4dfp -b $filenam $inpath/study$tse[$k]
#			if ($go)	dcm_to_4dfp -b $filenam $inpath/study$tse[$k]
#		else
#			echo		dcm_to_4dfp -b $filenam $inpath/$dcmroot.$tse[$k]."*"
#			if ($go) 	dcm_to_4dfp -b $filenam $inpath/$dcmroot.$tse[$k].*
#		endif
		set outname = $filenam
		set inname = $name_list[$tse_list[$k]]
		set dataformat = $format_list[$tse_list[$k]]
		set sorted = $sorted_list[$tse_list[$k]]
#		set mosaic = $mosaic_list[$tse_list[$k]]
#		if ($mosaic) then
#			$input_to_4dfp $outname $inname $dataformat $sorted $mosaic $go $nx $ny -q
#		else
		$input_to_4dfp $outname $inname $dataformat $sorted $go
#		endif
		if ($status) exit $status
		set tselst = ($tselst $filenam)
		@ k++
	end
	if ($ntse  > 1) then
		echo		collate_slice_4dfp $tselst $patid"_t2w"
		if ($go)	collate_slice_4dfp $tselst $patid"_t2w"
	endif
	echo		epi2t2w2mpr2atl2_4dfp $patid"_anat_ave" $patid"_t2w" $patid"_mpr1" useold $tarstr
	if ($go)	epi2t2w2mpr2atl2_4dfp $patid"_anat_ave" $patid"_t2w" $patid"_mpr1" useold $tarstr
else if (${#t1w_list}) then
#	if ($sorted) then
#		echo		dcm_to_4dfp -b $patid"_t1w" $inpath/study$t1w
#		if ($go)	dcm_to_4dfp -b $patid"_t1w" $inpath/study$t1w
#	else
#		echo		dcm_to_4dfp -b $patid"_t1w" $inpath/$dcmroot.$t1w."*"
#		if ($go) 	dcm_to_4dfp -b $patid"_t1w" $inpath/$dcmroot.$t1w.*
#	endif
	set outname = $patid"_t1w"
	set inname = $name_list[$t1w_list[$k]]
	set dataformat = $format_list[$t1w_list[$k]]
	set sorted = $sorted_list[$t1w_list[$k]]
#	set mosaic = $mosaic_list[$t1w_list[$k]]
#	if ($mosaic) then
#		$input_to_4dfp $outname $inname $dataformat $sorted $mosaic $go $nx $ny -q
#	else
	$input_to_4dfp $outname $inname $dataformat $sorted $go
#	endif
	echo		t2w2mpr_4dfp $patid"_mpr1" $patid"_t1w" $tarstr
	if ($go)	t2w2mpr_4dfp $patid"_mpr1" $patid"_t1w" $tarstr
	if ($status) exit $status

	echo		epi2t1w_4dfp $patid"_anat_ave" $patid"_t1w" $tarstr
	if ($go)	epi2t1w_4dfp $patid"_anat_ave" $patid"_t1w" $tarstr
	if ($status) exit $status

	echo		t4_mul $patid"_anat_ave_to_"$patid"_t1w_t4" $patid"_t1w_to_"$target:t"_t4"
	if ($go)	t4_mul $patid"_anat_ave_to_"$patid"_t1w_t4" $patid"_t1w_to_"$target:t"_t4"
else if (${#pdt2_list}) then
#	if ($sorted) then
#		echo		dcm_to_4dfp -b $patid"_pdt2" $inpath/study$pdt2
#		if ($go)	dcm_to_4dfp -b $patid"_pdt2" $inpath/study$pdt2
#	else
#		echo		dcm_to_4dfp -b $patid"_pdt2" $inpath/$dcmroot.$pdt2."*"
#		if ($go) 	dcm_to_4dfp -b $patid"_pdt2" $inpath/$dcmroot.$pdt2.*
#	endif
	set outname = $patid"_pdt2"
	set inname = $name_list[$pdt2_list[$k]]
	set dataformat = $format_list[$pdt2_list[$k]]
	set sorted = $sorted_list[$pdt2_list[$k]]
#	set mosaic = $mosaic_list[$pdt2_list[$k]]
#	if ($mosaic) then
#		$input_to_4dfp $outname $inname $dataformat $sorted $mosaic $go $nx $ny -q
#	else
	$input_to_4dfp $outname $inname $dataformat $sorted $go
#	endif
	if ($status) exit $status

	echo		extract_frame_4dfp $patid"_pdt2" 2 -o$patid"_t2w"
	if ($go)	extract_frame_4dfp $patid"_pdt2" 2 -o$patid"_t2w"
	if ($status) exit $status

	echo		epi2t2w2mpr2atl2_4dfp $patid"_anat_ave" $patid"_t2w" $patid"_mpr1" useold $tarstr
	if ($go)	epi2t2w2mpr2atl2_4dfp $patid"_anat_ave" $patid"_t2w" $patid"_mpr1" useold $tarstr
else
	echo		epi2mpr2atl2_4dfp $patid"_anat_ave" $patid"_mpr1" useold $tarstr
	if ($go)	epi2mpr2atl2_4dfp $patid"_anat_ave" $patid"_mpr1" useold $tarstr
endif
if ($status) exit $status

EPI_to_ATL:
################################################################
# make atlas transformed EPI anat_ave in 111 and 222 atlas space
################################################################
set t4file = $patid"_anat_ave_to_"$target:t"_t4"
foreach O (111 222 333)
	echo		t4img_4dfp $t4file  $patid"_anat_ave"	$patid"_anat_ave_t88_"$O -O$O
	if ($go)	t4img_4dfp $t4file  $patid"_anat_ave"	$patid"_anat_ave_t88_"$O -O$O
	echo		ifh2hdr	 -r2000				$patid"_anat_ave_t88_"$O
	if ($go)	ifh2hdr	 -r2000				$patid"_anat_ave_t88_"$O
end
if ($status) exit $status

/bin/rm *t4% >& /dev/null
popd		# out of atlas

if (! $epi2atl) exit 0
ATL:
date
###################################################################
# make cross-realigned atlas-transformed resampled BOLD 4dfp stacks
###################################################################
@ k = 1
while ($k <= $runs)
	pushd bold$irun[$k]
	set file = $patid"_b"$irun[$k]"_faln_dbnd_r3d_avg_norm".4dfp.img.rec
	set f = 1.0; if (-e $file) set f = `head $file | awk '/original/{print 1000/$NF}'`
	echo		t4_xr3d_4dfp $sourcedir/atlas/$patid"_anat_ave_to_"$target:t"_t4" $patid"_b"$irun[$k]"_faln_dbnd" -axr3d_atl -v$normode -c$f -O333
	if ($go)	t4_xr3d_4dfp $sourcedir/atlas/$patid"_anat_ave_to_"$target:t"_t4" $patid"_b"$irun[$k]"_faln_dbnd" -axr3d_atl -v$normode -c$f -O333
	if ($status) exit $status
	if ($economy > 6) then
		echo		/bin/rm $patid"_b"$irun[$k]"_faln_dbnd_xr3d_norm".4dfp."*"
		if ($go)	/bin/rm $patid"_b"$irun[$k]"_faln_dbnd_xr3d_norm".4dfp.*
	endif
	popd	# out of bold$irun[$k]
	@ k++
end

exit
